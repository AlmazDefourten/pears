// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/post/create": {
            "post": {
                "security": [
                    {
                        "JWTToken": []
                    }
                ],
                "description": "creating a new post with body parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create new post",
                "parameters": [
                    {
                        "description": "request body with info about post",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Post"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/post/get/{id}": {
            "get": {
                "security": [
                    {
                        "JWTToken": []
                    }
                ],
                "description": "get post info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get a post",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/post/list": {
            "get": {
                "security": [
                    {
                        "JWTToken": []
                    }
                ],
                "description": "takes array of posts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "List of posts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Post"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/user/authorization": {
            "post": {
                "description": "authorization and take a token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Authorization",
                "parameters": [
                    {
                        "description": "request body with login and password",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserAuthInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AuthResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.AuthResponse"
                        }
                    }
                }
            }
        },
        "/user/refresh": {
            "post": {
                "description": "method for check refresh token and refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "RefreshTokens",
                "parameters": [
                    {
                        "description": "request body with access and refresh tokens",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Tokens"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AuthResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.AuthResponse"
                        }
                    }
                }
            }
        },
        "/user/registration": {
            "post": {
                "description": "add new user to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Registration",
                "parameters": [
                    {
                        "description": "request body with info about user",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/userinfo/list": {
            "get": {
                "security": [
                    {
                        "JWTToken": []
                    }
                ],
                "description": "take list of all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "List of users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AuthResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "ok": {
                    "type": "boolean"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "models.Post": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "likes": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "postTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.PostTags"
                    }
                },
                "reposts": {
                    "type": "integer"
                },
                "time_end": {
                    "type": "string"
                },
                "time_start": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.PostType"
                },
                "views": {
                    "type": "integer"
                },
                "where": {
                    "type": "string"
                }
            }
        },
        "models.PostTags": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "post_id": {
                    "type": "integer"
                },
                "tag_id": {
                    "type": "integer"
                }
            }
        },
        "models.PostType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "Event",
                "People",
                "Community",
                "Project"
            ]
        },
        "models.Response": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "ok": {
                    "type": "boolean"
                }
            }
        },
        "models.Tokens": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer",
                    "example": 24
                },
                "id": {
                    "type": "integer"
                },
                "login": {
                    "type": "string",
                    "example": "ivan.petrov@mail.ru"
                },
                "name": {
                    "type": "string",
                    "example": "Andrey"
                },
                "nick": {
                    "type": "string",
                    "example": "PedanticCow"
                },
                "password": {
                    "type": "string",
                    "example": "mypaSSword123876"
                },
                "refresh_token": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "models.UserAuthInfo": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string",
                    "example": "ivan.petrov@mail.ru"
                },
                "password": {
                    "type": "string",
                    "example": "mypaSSword123876"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWTToken": {
            "description": "Access token only",
            "type": "apiKey",
            "name": "token",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Pears auto documentation",
	Description:      "Pears API, specification and description",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
