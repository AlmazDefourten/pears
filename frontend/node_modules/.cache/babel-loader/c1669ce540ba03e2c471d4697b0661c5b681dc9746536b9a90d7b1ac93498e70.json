{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041A\\u0438\\u0440\\u0438\\u043B\\u043B\\\\Desktop\\\\pears\\\\frontend\\\\src\\\\components\\\\swipes\\\\card.tsx\",\n  _s = $RefreshSig$();\nimport { motion, useAnimationControls } from 'framer-motion';\nimport css from \"./swipes.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = _ref => {\n  _s();\n  let {\n    name,\n    setCharacters\n  } = _ref;\n  const controls = useAnimationControls();\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    className: \"swipe\"\n    // animate - характеристики. Тут я использвал хук анимаций(см документацию). Пример без хука: {х:0, y: 30, scale: 0.8 }\n    ,\n    animate: controls\n    //drag идет только по оси x. Если не указывать ось, то будет по обоим, x и y, осям\n    ,\n    drag: \"x\"\n    //без event ничего не работает, не убирать\n    //offset - изменения в пикселях от позиции до начала drag\n    ,\n    onDragEnd: async (event, info) => {\n      const x = info.offset.x;\n      switch (true) {\n        case x > 200:\n          //controls.start() возвращает promise, см документацию\n          await controls.start({\n            x: window.screen.width\n          });\n          setCharacters(prevState => prevState.filter(char => char.name !== name));\n          console.log(\"Swiped right\");\n          break;\n        case x < -200:\n          await controls.start({\n            x: -window.screen.width\n          });\n          setCharacters(prevState => prevState.filter(char => char.name !== name));\n          console.log(\"Swiped left\");\n          break;\n      }\n      // if (info.offset.x > 200) {\n      // await controls.start({x: window.screen.width})\n      // setCharacters(prevState => prevState.filter(char => char.name !== name))\n      // console.log(\"Swiped right\")\n      // }\n      // if (info.offset.x < -200) {\n      // await controls.start({x: -window.screen.width})\n      // setCharacters(prevState => prevState.filter(char => char.name !== name))\n      // console.log(\"Swiped left\")\n      // }\n    }\n    //возвращает на место при отпускании\n    ,\n    dragSnapToOrigin: true\n    //ограничения в пикселях на drag от оригинального положения(самого первого, типа init), не позволит выйти за эти значения\n    ,\n    dragConstraints: {\n      left: -300,\n      right: 300\n    }\n    //не позволяет карточке \"скользить\" после отпускания\n    ,\n    dragMomentum: true,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.card,\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n_s(Card, \"TdBlAv3Em/J1b+sEMsDh85RyRD4=\", false, function () {\n  return [useAnimationControls];\n});\n_c = Card;\nexport default Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["motion","useAnimationControls","css","Card","name","setCharacters","controls","event","info","x","offset","start","window","screen","width","prevState","filter","char","console","log","left","right","card"],"sources":["C:/Users/Кирилл/Desktop/pears/frontend/src/components/swipes/card.tsx"],"sourcesContent":["import { motion, PanInfo, useAnimationControls } from 'framer-motion';\r\nimport css from \"./swipes.module.css\";\r\ninterface IProps{\r\n    name: string, \r\n    setCharacters: React.Dispatch<React.SetStateAction<{name: string;}[]>>,\r\n}\r\n\r\nconst Card = ({name, setCharacters}: IProps) =>{\r\n\r\n    const controls = useAnimationControls();\r\n    return(\r\n        <motion.div\r\n        className=\"swipe\"\r\n        // animate - характеристики. Тут я использвал хук анимаций(см документацию). Пример без хука: {х:0, y: 30, scale: 0.8 }\r\n        animate={controls}\r\n        //drag идет только по оси x. Если не указывать ось, то будет по обоим, x и y, осям\r\n        drag='x'\r\n        //без event ничего не работает, не убирать\r\n        //offset - изменения в пикселях от позиции до начала drag\r\n        onDragEnd={async (event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {\r\n            const x:number = info.offset.x;\r\n            switch(true){\r\n                case(x > 200):\r\n                    //controls.start() возвращает promise, см документацию\r\n                    await controls.start({x: window.screen.width});\r\n                    setCharacters(prevState => prevState.filter(char => char.name !== name));\r\n                    console.log(\"Swiped right\");\r\n                    break;\r\n                case(x < -200):\r\n                    await controls.start({x: -window.screen.width});\r\n                    setCharacters(prevState => prevState.filter(char => char.name !== name));\r\n                    console.log(\"Swiped left\");\r\n                    break;\r\n            }\r\n            // if (info.offset.x > 200) {\r\n            // await controls.start({x: window.screen.width})\r\n            // setCharacters(prevState => prevState.filter(char => char.name !== name))\r\n            // console.log(\"Swiped right\")\r\n            // }\r\n            // if (info.offset.x < -200) {\r\n            // await controls.start({x: -window.screen.width})\r\n            // setCharacters(prevState => prevState.filter(char => char.name !== name))\r\n            // console.log(\"Swiped left\")\r\n            // }\r\n        }}\r\n        //возвращает на место при отпускании\r\n        dragSnapToOrigin\r\n        //ограничения в пикселях на drag от оригинального положения(самого первого, типа init), не позволит выйти за эти значения\r\n        dragConstraints={{ left: -300, right: 300 }}\r\n        //не позволяет карточке \"скользить\" после отпускания\r\n        dragMomentum={true}>\r\n            <div className={css.card}>{name}</div>\r\n        </motion.div>\r\n    )\r\n} \r\n\r\nexport default Card;"],"mappings":";;AAAA,SAASA,MAAM,EAAWC,oBAAoB,QAAQ,eAAe;AACrE,OAAOC,GAAG,MAAM,qBAAqB;AAAC;AAMtC,MAAMC,IAAI,GAAG,QAAkC;EAAA;EAAA,IAAjC;IAACC,IAAI;IAAEC;EAAqB,CAAC;EAEvC,MAAMC,QAAQ,GAAGL,oBAAoB,EAAE;EACvC,oBACI,QAAC,MAAM,CAAC,GAAG;IACX,SAAS,EAAC;IACV;IAAA;IACA,OAAO,EAAEK;IACT;IAAA;IACA,IAAI,EAAC;IACL;IACA;IAAA;IACA,SAAS,EAAE,OAAOC,KAA6C,EAAEC,IAAa,KAAK;MAC/E,MAAMC,CAAQ,GAAGD,IAAI,CAACE,MAAM,CAACD,CAAC;MAC9B,QAAO,IAAI;QACP,KAAKA,CAAC,GAAG,GAAG;UACR;UACA,MAAMH,QAAQ,CAACK,KAAK,CAAC;YAACF,CAAC,EAAEG,MAAM,CAACC,MAAM,CAACC;UAAK,CAAC,CAAC;UAC9CT,aAAa,CAACU,SAAS,IAAIA,SAAS,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACb,IAAI,KAAKA,IAAI,CAAC,CAAC;UACxEc,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;UAC3B;QACJ,KAAKV,CAAC,GAAG,CAAC,GAAG;UACT,MAAMH,QAAQ,CAACK,KAAK,CAAC;YAACF,CAAC,EAAE,CAACG,MAAM,CAACC,MAAM,CAACC;UAAK,CAAC,CAAC;UAC/CT,aAAa,CAACU,SAAS,IAAIA,SAAS,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACb,IAAI,KAAKA,IAAI,CAAC,CAAC;UACxEc,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;UAC1B;MAAM;MAEd;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ;IACA;IAAA;IACA,gBAAgB;IAChB;IAAA;IACA,eAAe,EAAE;MAAEC,IAAI,EAAE,CAAC,GAAG;MAAEC,KAAK,EAAE;IAAI;IAC1C;IAAA;IACA,YAAY,EAAE,IAAK;IAAA,uBACf;MAAK,SAAS,EAAEnB,GAAG,CAACoB,IAAK;MAAA,UAAElB;IAAI;MAAA;MAAA;MAAA;IAAA;EAAO;IAAA;IAAA;IAAA;EAAA,QAC7B;AAErB,CAAC;AAAA,GA/CKD,IAAI;EAAA,QAEWF,oBAAoB;AAAA;AAAA,KAFnCE,IAAI;AAiDV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}