{"ast":null,"code":"// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nimport * as React from 'react';\nlet hadKeyboardEvent = true;\nlet hadFocusVisibleRecently = false;\nlet hadFocusVisibleRecentlyTimeout;\nconst inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n\n/**\r\n * Computes whether the given element should automatically trigger the\r\n * `focus-visible` class being added, i.e. whether it should always match\r\n * `:focus-visible` when focused.\r\n * @param {Element} node\r\n * @returns {boolean}\r\n */\nfunction focusTriggersKeyboardModality(node) {\n  const {\n    type,\n    tagName\n  } = node;\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n  if (node.isContentEditable) {\n    return true;\n  }\n  return false;\n}\n\n/**\r\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\r\n * If the most recent user interaction was via the keyboard;\r\n * and the key press did not include a meta, alt/option, or control key;\r\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\r\n * @param {KeyboardEvent} event\r\n */\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n  hadKeyboardEvent = true;\n}\n\n/**\r\n * If at any point a user clicks with a pointing device, ensure that we change\r\n * the modality away from keyboard.\r\n * This avoids the situation where a user presses a key on an already focused\r\n * element, and then clicks on a different element, focusing it with a\r\n * pointing device, while we still think we're in keyboard modality.\r\n */\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\nfunction prepare(doc) {\n  doc.addEventListener('keydown', handleKeyDown, true);\n  doc.addEventListener('mousedown', handlePointerDown, true);\n  doc.addEventListener('pointerdown', handlePointerDown, true);\n  doc.addEventListener('touchstart', handlePointerDown, true);\n  doc.addEventListener('visibilitychange', handleVisibilityChange, true);\n}\nexport function teardown(doc) {\n  doc.removeEventListener('keydown', handleKeyDown, true);\n  doc.removeEventListener('mousedown', handlePointerDown, true);\n  doc.removeEventListener('pointerdown', handlePointerDown, true);\n  doc.removeEventListener('touchstart', handlePointerDown, true);\n  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);\n}\nfunction isFocusVisible(event) {\n  const {\n    target\n  } = event;\n  try {\n    return target.matches(':focus-visible');\n  } catch (error) {\n    // Browsers not implementing :focus-visible will throw a SyntaxError.\n    // We use our own heuristic for those browsers.\n    // Rethrow might be better if it's not the expected error but do we really\n    // want to crash if focus-visible malfunctioned?\n  }\n\n  // No need for validFocusTarget check. The user does that by attaching it to\n  // focusable events only.\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\n}\nexport default function useIsFocusVisible() {\n  const ref = React.useCallback(node => {\n    if (node != null) {\n      prepare(node.ownerDocument);\n    }\n  }, []);\n  const isFocusVisibleRef = React.useRef(false);\n\n  /**\r\n   * Should be called if a blur event is fired\r\n   */\n  function handleBlurVisible() {\n    // checking against potential state variable does not suffice if we focus and blur synchronously.\n    // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.\n    // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.\n    // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751\n    // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).\n    if (isFocusVisibleRef.current) {\n      // To detect a tab/window switch, we look for a blur event followed\n      // rapidly by a visibility change.\n      // If we don't see a visibility change within 100ms, it's probably a\n      // regular focus change.\n      hadFocusVisibleRecently = true;\n      window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n      hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {\n        hadFocusVisibleRecently = false;\n      }, 100);\n      isFocusVisibleRef.current = false;\n      return true;\n    }\n    return false;\n  }\n\n  /**\r\n   * Should be called if a blur event is fired\r\n   */\n  function handleFocusVisible(event) {\n    if (isFocusVisible(event)) {\n      isFocusVisibleRef.current = true;\n      return true;\n    }\n    return false;\n  }\n  return {\n    isFocusVisibleRef,\n    onFocus: handleFocusVisible,\n    onBlur: handleBlurVisible,\n    ref\n  };\n}","map":{"version":3,"names":["React","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesWhitelist","text","search","url","tel","email","password","number","date","month","week","time","datetime","focusTriggersKeyboardModality","node","type","tagName","readOnly","isContentEditable","handleKeyDown","event","metaKey","altKey","ctrlKey","handlePointerDown","handleVisibilityChange","visibilityState","prepare","doc","addEventListener","teardown","removeEventListener","isFocusVisible","target","matches","error","useIsFocusVisible","ref","useCallback","ownerDocument","isFocusVisibleRef","useRef","handleBlurVisible","current","window","clearTimeout","setTimeout","handleFocusVisible","onFocus","onBlur"],"sources":["C:/Users/Кирилл/Desktop/here/pears/frontend/node_modules/@mui/utils/esm/useIsFocusVisible.js"],"sourcesContent":["// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\r\nimport * as React from 'react';\r\nlet hadKeyboardEvent = true;\r\nlet hadFocusVisibleRecently = false;\r\nlet hadFocusVisibleRecentlyTimeout;\r\nconst inputTypesWhitelist = {\r\n  text: true,\r\n  search: true,\r\n  url: true,\r\n  tel: true,\r\n  email: true,\r\n  password: true,\r\n  number: true,\r\n  date: true,\r\n  month: true,\r\n  week: true,\r\n  time: true,\r\n  datetime: true,\r\n  'datetime-local': true\r\n};\r\n\r\n/**\r\n * Computes whether the given element should automatically trigger the\r\n * `focus-visible` class being added, i.e. whether it should always match\r\n * `:focus-visible` when focused.\r\n * @param {Element} node\r\n * @returns {boolean}\r\n */\r\nfunction focusTriggersKeyboardModality(node) {\r\n  const {\r\n    type,\r\n    tagName\r\n  } = node;\r\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\r\n    return true;\r\n  }\r\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\r\n    return true;\r\n  }\r\n  if (node.isContentEditable) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\r\n * If the most recent user interaction was via the keyboard;\r\n * and the key press did not include a meta, alt/option, or control key;\r\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\r\n * @param {KeyboardEvent} event\r\n */\r\nfunction handleKeyDown(event) {\r\n  if (event.metaKey || event.altKey || event.ctrlKey) {\r\n    return;\r\n  }\r\n  hadKeyboardEvent = true;\r\n}\r\n\r\n/**\r\n * If at any point a user clicks with a pointing device, ensure that we change\r\n * the modality away from keyboard.\r\n * This avoids the situation where a user presses a key on an already focused\r\n * element, and then clicks on a different element, focusing it with a\r\n * pointing device, while we still think we're in keyboard modality.\r\n */\r\nfunction handlePointerDown() {\r\n  hadKeyboardEvent = false;\r\n}\r\nfunction handleVisibilityChange() {\r\n  if (this.visibilityState === 'hidden') {\r\n    // If the tab becomes active again, the browser will handle calling focus\r\n    // on the element (Safari actually calls it twice).\r\n    // If this tab change caused a blur on an element with focus-visible,\r\n    // re-apply the class when the user switches back to the tab.\r\n    if (hadFocusVisibleRecently) {\r\n      hadKeyboardEvent = true;\r\n    }\r\n  }\r\n}\r\nfunction prepare(doc) {\r\n  doc.addEventListener('keydown', handleKeyDown, true);\r\n  doc.addEventListener('mousedown', handlePointerDown, true);\r\n  doc.addEventListener('pointerdown', handlePointerDown, true);\r\n  doc.addEventListener('touchstart', handlePointerDown, true);\r\n  doc.addEventListener('visibilitychange', handleVisibilityChange, true);\r\n}\r\nexport function teardown(doc) {\r\n  doc.removeEventListener('keydown', handleKeyDown, true);\r\n  doc.removeEventListener('mousedown', handlePointerDown, true);\r\n  doc.removeEventListener('pointerdown', handlePointerDown, true);\r\n  doc.removeEventListener('touchstart', handlePointerDown, true);\r\n  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);\r\n}\r\nfunction isFocusVisible(event) {\r\n  const {\r\n    target\r\n  } = event;\r\n  try {\r\n    return target.matches(':focus-visible');\r\n  } catch (error) {\r\n    // Browsers not implementing :focus-visible will throw a SyntaxError.\r\n    // We use our own heuristic for those browsers.\r\n    // Rethrow might be better if it's not the expected error but do we really\r\n    // want to crash if focus-visible malfunctioned?\r\n  }\r\n\r\n  // No need for validFocusTarget check. The user does that by attaching it to\r\n  // focusable events only.\r\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\r\n}\r\nexport default function useIsFocusVisible() {\r\n  const ref = React.useCallback(node => {\r\n    if (node != null) {\r\n      prepare(node.ownerDocument);\r\n    }\r\n  }, []);\r\n  const isFocusVisibleRef = React.useRef(false);\r\n\r\n  /**\r\n   * Should be called if a blur event is fired\r\n   */\r\n  function handleBlurVisible() {\r\n    // checking against potential state variable does not suffice if we focus and blur synchronously.\r\n    // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.\r\n    // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.\r\n    // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751\r\n    // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).\r\n    if (isFocusVisibleRef.current) {\r\n      // To detect a tab/window switch, we look for a blur event followed\r\n      // rapidly by a visibility change.\r\n      // If we don't see a visibility change within 100ms, it's probably a\r\n      // regular focus change.\r\n      hadFocusVisibleRecently = true;\r\n      window.clearTimeout(hadFocusVisibleRecentlyTimeout);\r\n      hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {\r\n        hadFocusVisibleRecently = false;\r\n      }, 100);\r\n      isFocusVisibleRef.current = false;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Should be called if a blur event is fired\r\n   */\r\n  function handleFocusVisible(event) {\r\n    if (isFocusVisible(event)) {\r\n      isFocusVisibleRef.current = true;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  return {\r\n    isFocusVisibleRef,\r\n    onFocus: handleFocusVisible,\r\n    onBlur: handleBlurVisible,\r\n    ref\r\n  };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}