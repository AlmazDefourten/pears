{"ast":null,"code":"import { useState } from 'react';\nimport { initPrefersReducedMotion } from './index.mjs';\nimport { warnOnce } from '../warn-once.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\n/**\r\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\r\n *\r\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\r\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\r\n *\r\n * It will actively respond to changes and re-render your components with the latest setting.\r\n *\r\n * ```jsx\r\n * export function Sidebar({ isOpen }) {\r\n *   const shouldReduceMotion = useReducedMotion()\r\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\r\n *\r\n *   return (\r\n *     <motion.div animate={{\r\n *       opacity: isOpen ? 1 : 0,\r\n *       x: isOpen ? 0 : closedX\r\n *     }} />\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @return boolean\r\n *\r\n * @public\r\n */\nfunction useReducedMotion() {\n  /**\r\n   * Lazy initialisation of prefersReducedMotion\r\n   */\n  !hasReducedMotionListener.current && initPrefersReducedMotion();\n  const [shouldReduceMotion] = useState(prefersReducedMotion.current);\n  if (process.env.NODE_ENV !== \"production\") {\n    warnOnce(shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n  }\n  /**\r\n   * TODO See if people miss automatically updating shouldReduceMotion setting\r\n   */\n  return shouldReduceMotion;\n}\nexport { useReducedMotion };","map":{"version":3,"names":["useState","initPrefersReducedMotion","warnOnce","hasReducedMotionListener","prefersReducedMotion","useReducedMotion","current","shouldReduceMotion","process","env","NODE_ENV"],"sources":["C:/Users/Кирилл/Desktop/here/pears/frontend/node_modules/framer-motion/dist/es/utils/reduced-motion/use-reduced-motion.mjs"],"sourcesContent":["import { useState } from 'react';\r\nimport { initPrefersReducedMotion } from './index.mjs';\r\nimport { warnOnce } from '../warn-once.mjs';\r\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\r\n\r\n/**\r\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\r\n *\r\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\r\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\r\n *\r\n * It will actively respond to changes and re-render your components with the latest setting.\r\n *\r\n * ```jsx\r\n * export function Sidebar({ isOpen }) {\r\n *   const shouldReduceMotion = useReducedMotion()\r\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\r\n *\r\n *   return (\r\n *     <motion.div animate={{\r\n *       opacity: isOpen ? 1 : 0,\r\n *       x: isOpen ? 0 : closedX\r\n *     }} />\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @return boolean\r\n *\r\n * @public\r\n */\r\nfunction useReducedMotion() {\r\n    /**\r\n     * Lazy initialisation of prefersReducedMotion\r\n     */\r\n    !hasReducedMotionListener.current && initPrefersReducedMotion();\r\n    const [shouldReduceMotion] = useState(prefersReducedMotion.current);\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n        warnOnce(shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\r\n    }\r\n    /**\r\n     * TODO See if people miss automatically updating shouldReduceMotion setting\r\n     */\r\n    return shouldReduceMotion;\r\n}\r\n\r\nexport { useReducedMotion };\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,wBAAwB,QAAQ,aAAa;AACtD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,wBAAwB,EAAEC,oBAAoB,QAAQ,aAAa;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CAAA,EAAG;EACxB;AACJ;AACA;EACI,CAACF,wBAAwB,CAACG,OAAO,IAAIL,wBAAwB,EAAE;EAC/D,MAAM,CAACM,kBAAkB,CAAC,GAAGP,QAAQ,CAACI,oBAAoB,CAACE,OAAO,CAAC;EACnE,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACvCR,QAAQ,CAACK,kBAAkB,KAAK,IAAI,EAAE,wFAAwF,CAAC;EACnI;EACA;AACJ;AACA;EACI,OAAOA,kBAAkB;AAC7B;AAEA,SAASF,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}