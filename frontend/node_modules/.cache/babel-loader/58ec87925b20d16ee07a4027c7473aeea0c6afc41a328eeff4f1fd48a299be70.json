{"ast":null,"code":"import { createMotionValueAnimation } from './index.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\n\n/**\r\n * Animate a single value or a `MotionValue`.\r\n *\r\n * The first argument is either a `MotionValue` to animate, or an initial animation value.\r\n *\r\n * The second is either a value to animate to, or an array of keyframes to animate through.\r\n *\r\n * The third argument can be either tween or spring options, and optional lifecycle methods: `onUpdate`, `onPlay`, `onComplete`, `onRepeat` and `onStop`.\r\n *\r\n * Returns `AnimationPlaybackControls`, currently just a `stop` method.\r\n *\r\n * ```javascript\r\n * const x = useMotionValue(0)\r\n *\r\n * useEffect(() => {\r\n *   const controls = animate(x, 100, {\r\n *     type: \"spring\",\r\n *     stiffness: 2000,\r\n *     onComplete: v => {}\r\n *   })\r\n *\r\n *   return controls.stop\r\n * })\r\n * ```\r\n *\r\n * @public\r\n */\nfunction animate(from, to) {\n  let transition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const value = isMotionValue(from) ? from : motionValue(from);\n  value.start(createMotionValueAnimation(\"\", value, to, transition));\n  return {\n    stop: () => value.stop(),\n    isAnimating: () => value.isAnimating()\n  };\n}\nexport { animate };","map":{"version":3,"names":["createMotionValueAnimation","motionValue","isMotionValue","animate","from","to","transition","arguments","length","undefined","value","start","stop","isAnimating"],"sources":["C:/Users/Кирилл/Desktop/here/pears/frontend/node_modules/framer-motion/dist/es/animation/animate.mjs"],"sourcesContent":["import { createMotionValueAnimation } from './index.mjs';\r\nimport { motionValue } from '../value/index.mjs';\r\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\r\n\r\n/**\r\n * Animate a single value or a `MotionValue`.\r\n *\r\n * The first argument is either a `MotionValue` to animate, or an initial animation value.\r\n *\r\n * The second is either a value to animate to, or an array of keyframes to animate through.\r\n *\r\n * The third argument can be either tween or spring options, and optional lifecycle methods: `onUpdate`, `onPlay`, `onComplete`, `onRepeat` and `onStop`.\r\n *\r\n * Returns `AnimationPlaybackControls`, currently just a `stop` method.\r\n *\r\n * ```javascript\r\n * const x = useMotionValue(0)\r\n *\r\n * useEffect(() => {\r\n *   const controls = animate(x, 100, {\r\n *     type: \"spring\",\r\n *     stiffness: 2000,\r\n *     onComplete: v => {}\r\n *   })\r\n *\r\n *   return controls.stop\r\n * })\r\n * ```\r\n *\r\n * @public\r\n */\r\nfunction animate(from, to, transition = {}) {\r\n    const value = isMotionValue(from) ? from : motionValue(from);\r\n    value.start(createMotionValueAnimation(\"\", value, to, transition));\r\n    return {\r\n        stop: () => value.stop(),\r\n        isAnimating: () => value.isAnimating(),\r\n    };\r\n}\r\n\r\nexport { animate };\r\n"],"mappings":"AAAA,SAASA,0BAA0B,QAAQ,aAAa;AACxD,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,aAAa,QAAQ,oCAAoC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,IAAI,EAAEC,EAAE,EAAmB;EAAA,IAAjBC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACtC,MAAMG,KAAK,GAAGR,aAAa,CAACE,IAAI,CAAC,GAAGA,IAAI,GAAGH,WAAW,CAACG,IAAI,CAAC;EAC5DM,KAAK,CAACC,KAAK,CAACX,0BAA0B,CAAC,EAAE,EAAEU,KAAK,EAAEL,EAAE,EAAEC,UAAU,CAAC,CAAC;EAClE,OAAO;IACHM,IAAI,EAAEA,CAAA,KAAMF,KAAK,CAACE,IAAI,EAAE;IACxBC,WAAW,EAAEA,CAAA,KAAMH,KAAK,CAACG,WAAW;EACxC,CAAC;AACL;AAEA,SAASV,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}