{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport useButton from '../useButton';\nimport useListbox, { defaultListboxReducer, ActionTypes } from '../useListbox';\nimport defaultOptionStringifier from '../SelectUnstyled/defaultOptionStringifier';\nimport useSelectChangeNotifiers from './useSelectChangeNotifiers';\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Unstyled Select](https://mui.com/base/react-select/#hook)\r\n *\r\n * API:\r\n *\r\n * - [useSelect API](https://mui.com/base/api/use-select/)\r\n */\nfunction useSelect(props) {\n  const {\n    buttonRef: buttonRefProp,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open = false,\n    options,\n    optionStringifier = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue = defaultValueProp;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = multiple ? [] : null;\n  }\n  const optionsMap = React.useMemo(() => {\n    const map = new Map();\n    options.forEach(option => {\n      map.set(option.value, option);\n    });\n    return map;\n  }, [options]);\n\n  // prevents closing the listbox on keyUp right after opening it\n  const ignoreEnterKeyUp = React.useRef(false);\n\n  // prevents reopening the listbox when button is clicked\n  // (listbox closes on lost focus, then immediately reopens on click)\n  const ignoreClick = React.useRef(false);\n\n  // Ensure the listbox is focused after opening\n  const [listboxFocusRequested, requestListboxFocus] = React.useState(false);\n  const focusListboxIfRequested = React.useCallback(() => {\n    if (listboxFocusRequested && listboxRef.current != null) {\n      listboxRef.current.focus();\n      requestListboxFocus(false);\n    }\n  }, [listboxFocusRequested]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef, focusListboxIfRequested);\n  const {\n    notifySelectionChanged,\n    notifyHighlightChanged,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = useSelectChangeNotifiers();\n  React.useEffect(() => {\n    focusListboxIfRequested();\n  }, [focusListboxIfRequested]);\n  React.useEffect(() => {\n    requestListboxFocus(open);\n  }, [open]);\n  const createHandleMouseDown = otherHandlers => event => {\n    var _otherHandlers$onMous;\n    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);\n    if (!event.defaultPrevented && open) {\n      ignoreClick.current = true;\n    }\n  };\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n    if (!event.defaultPrevented && !ignoreClick.current) {\n      onOpenChange == null ? void 0 : onOpenChange(!open);\n    }\n    ignoreClick.current = false;\n  };\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (event.key === 'Enter') {\n      ignoreEnterKeyUp.current = true;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      onOpenChange == null ? void 0 : onOpenChange(true);\n    }\n  };\n  const createHandleListboxKeyUp = otherHandlers => event => {\n    var _otherHandlers$onKeyU;\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    const closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];\n    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {\n      var _buttonRef$current;\n      buttonRef == null ? void 0 : (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n    }\n    ignoreEnterKeyUp.current = false;\n  };\n  const createHandleListboxItemClick = React.useCallback(otherHandlers => event => {\n    var _otherHandlers$onClic2;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (!multiple) {\n      onOpenChange == null ? void 0 : onOpenChange(false);\n    }\n  }, [multiple, onOpenChange]);\n  const createHandleListboxBlur = otherHandlers => event => {\n    var _otherHandlers$onBlur;\n    otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);\n    if (!event.defaultPrevented) {\n      onOpenChange == null ? void 0 : onOpenChange(false);\n    }\n  };\n  const listboxReducer = React.useCallback((state, action) => {\n    const newState = defaultListboxReducer(state, action);\n\n    // change selection when listbox is closed\n    if (action.type === ActionTypes.keyDown && !open && (action.event.key === 'ArrowUp' || action.event.key === 'ArrowDown')) {\n      return _extends({}, newState, {\n        selectedValue: newState.highlightedValue\n      });\n    }\n    if (action.type === ActionTypes.blur || action.type === ActionTypes.setValue || action.type === ActionTypes.optionsChange) {\n      return _extends({}, newState, {\n        highlightedValue: newState.selectedValue\n      });\n    }\n    return newState;\n  }, [open]);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible\n  } = useButton({\n    disabled,\n    ref: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => options.map(o => o.value), [options]);\n  let useListboxParameters;\n  const isOptionDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = optionsMap.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [optionsMap]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = optionsMap.get(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return optionStringifier(option);\n  }, [optionsMap, optionStringifier]);\n  if (props.multiple) {\n    const onChangeMultiple = onChange;\n    useListboxParameters = {\n      defaultValue: defaultValue,\n      id: listboxId,\n      isOptionDisabled,\n      listboxRef: handleListboxRef,\n      multiple: true,\n      onChange: (e, newValues) => {\n        onChangeMultiple == null ? void 0 : onChangeMultiple(e, newValues);\n      },\n      onHighlightChange: (e, newValue) => {\n        onHighlightChange == null ? void 0 : onHighlightChange(e, newValue != null ? newValue : null);\n      },\n      options: optionValues,\n      optionStringifier: stringifyOption,\n      value: valueProp\n    };\n  } else {\n    const onChangeSingle = onChange;\n    useListboxParameters = {\n      defaultValue: defaultValue,\n      id: listboxId,\n      isOptionDisabled,\n      listboxRef: handleListboxRef,\n      multiple: false,\n      onChange: (e, newValue) => {\n        onChangeSingle == null ? void 0 : onChangeSingle(e, newValue);\n      },\n      onHighlightChange: (e, newValue) => {\n        onHighlightChange == null ? void 0 : onHighlightChange(e, newValue);\n      },\n      options: optionValues,\n      optionStringifier: stringifyOption,\n      stateReducer: listboxReducer,\n      value: valueProp\n    };\n  }\n  const {\n    getRootProps: getListboxRootProps,\n    getOptionProps: getListboxOptionProps,\n    getOptionState,\n    highlightedOption,\n    selectedOption\n  } = useListbox(useListboxParameters);\n  React.useEffect(() => {\n    notifySelectionChanged(selectedOption);\n  }, [selectedOption, notifySelectionChanged]);\n  React.useEffect(() => {\n    notifyHighlightChanged(highlightedOption);\n  }, [highlightedOption, notifyHighlightChanged]);\n  const getButtonProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      onMouseDown: createHandleMouseDown(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    })), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-haspopup': 'listbox',\n      'aria-controls': listboxId\n    });\n  };\n  const getListboxProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return getListboxRootProps(_extends({}, otherHandlers, {\n      onBlur: createHandleListboxBlur(otherHandlers),\n      onKeyUp: createHandleListboxKeyUp(otherHandlers)\n    }));\n  };\n  const getOptionProps = React.useCallback(function (optionValue) {\n    let otherHandlers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return getListboxOptionProps(optionValue, _extends({}, otherHandlers, {\n      onClick: createHandleListboxItemClick(otherHandlers)\n    }));\n  }, [getListboxOptionProps, createHandleListboxItemClick]);\n  React.useDebugValue({\n    selectedOption,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => ({\n    listboxRef,\n    getOptionProps,\n    getOptionState,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  }), [getOptionProps, getOptionState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    contextValue,\n    open,\n    value: selectedOption,\n    highlightedOption\n  };\n}\nexport default useSelect;","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","useButton","useListbox","defaultListboxReducer","ActionTypes","defaultOptionStringifier","useSelectChangeNotifiers","useSelect","props","buttonRef","buttonRefProp","defaultValue","defaultValueProp","disabled","listboxId","listboxIdProp","listboxRef","listboxRefProp","multiple","onChange","onHighlightChange","onOpenChange","open","options","optionStringifier","value","valueProp","useRef","handleButtonRef","undefined","optionsMap","useMemo","map","Map","forEach","option","set","ignoreEnterKeyUp","ignoreClick","listboxFocusRequested","requestListboxFocus","useState","focusListboxIfRequested","useCallback","current","focus","handleListboxRef","notifySelectionChanged","notifyHighlightChanged","registerHighlightChangeHandler","registerSelectionChangeHandler","useEffect","createHandleMouseDown","otherHandlers","event","_otherHandlers$onMous","onMouseDown","call","defaultPrevented","createHandleButtonClick","_otherHandlers$onClic","onClick","createHandleButtonKeyDown","_otherHandlers$onKeyD","onKeyDown","key","preventDefault","createHandleListboxKeyUp","_otherHandlers$onKeyU","onKeyUp","closingKeys","includes","_buttonRef$current","createHandleListboxItemClick","_otherHandlers$onClic2","createHandleListboxBlur","_otherHandlers$onBlur","onBlur","listboxReducer","state","action","newState","type","keyDown","selectedValue","highlightedValue","blur","setValue","optionsChange","getRootProps","getButtonRootProps","active","buttonActive","focusVisible","buttonFocusVisible","ref","optionValues","o","useListboxParameters","isOptionDisabled","valueToCheck","_option$disabled","get","stringifyOption","onChangeMultiple","id","e","newValues","newValue","onChangeSingle","stateReducer","getListboxRootProps","getOptionProps","getListboxOptionProps","getOptionState","highlightedOption","selectedOption","getButtonProps","arguments","length","role","getListboxProps","optionValue","useDebugValue","contextValue"],"sources":["C:/Users/Кирилл/Desktop/Новая папка (2)/luioi/pears/frontend/node_modules/@mui/base/useSelect/useSelect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\r\nimport useButton from '../useButton';\r\nimport useListbox, { defaultListboxReducer, ActionTypes } from '../useListbox';\r\nimport defaultOptionStringifier from '../SelectUnstyled/defaultOptionStringifier';\r\nimport useSelectChangeNotifiers from './useSelectChangeNotifiers';\r\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Unstyled Select](https://mui.com/base/react-select/#hook)\r\n *\r\n * API:\r\n *\r\n * - [useSelect API](https://mui.com/base/api/use-select/)\r\n */\r\nfunction useSelect(props) {\r\n  const {\r\n    buttonRef: buttonRefProp,\r\n    defaultValue: defaultValueProp,\r\n    disabled = false,\r\n    listboxId: listboxIdProp,\r\n    listboxRef: listboxRefProp,\r\n    multiple = false,\r\n    onChange,\r\n    onHighlightChange,\r\n    onOpenChange,\r\n    open = false,\r\n    options,\r\n    optionStringifier = defaultOptionStringifier,\r\n    value: valueProp\r\n  } = props;\r\n  const buttonRef = React.useRef(null);\r\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\r\n  const listboxRef = React.useRef(null);\r\n  const listboxId = useId(listboxIdProp);\r\n  let defaultValue = defaultValueProp;\r\n  if (valueProp === undefined && defaultValueProp === undefined) {\r\n    defaultValue = multiple ? [] : null;\r\n  }\r\n  const optionsMap = React.useMemo(() => {\r\n    const map = new Map();\r\n    options.forEach(option => {\r\n      map.set(option.value, option);\r\n    });\r\n    return map;\r\n  }, [options]);\r\n\r\n  // prevents closing the listbox on keyUp right after opening it\r\n  const ignoreEnterKeyUp = React.useRef(false);\r\n\r\n  // prevents reopening the listbox when button is clicked\r\n  // (listbox closes on lost focus, then immediately reopens on click)\r\n  const ignoreClick = React.useRef(false);\r\n\r\n  // Ensure the listbox is focused after opening\r\n  const [listboxFocusRequested, requestListboxFocus] = React.useState(false);\r\n  const focusListboxIfRequested = React.useCallback(() => {\r\n    if (listboxFocusRequested && listboxRef.current != null) {\r\n      listboxRef.current.focus();\r\n      requestListboxFocus(false);\r\n    }\r\n  }, [listboxFocusRequested]);\r\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef, focusListboxIfRequested);\r\n  const {\r\n    notifySelectionChanged,\r\n    notifyHighlightChanged,\r\n    registerHighlightChangeHandler,\r\n    registerSelectionChangeHandler\r\n  } = useSelectChangeNotifiers();\r\n  React.useEffect(() => {\r\n    focusListboxIfRequested();\r\n  }, [focusListboxIfRequested]);\r\n  React.useEffect(() => {\r\n    requestListboxFocus(open);\r\n  }, [open]);\r\n  const createHandleMouseDown = otherHandlers => event => {\r\n    var _otherHandlers$onMous;\r\n    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);\r\n    if (!event.defaultPrevented && open) {\r\n      ignoreClick.current = true;\r\n    }\r\n  };\r\n  const createHandleButtonClick = otherHandlers => event => {\r\n    var _otherHandlers$onClic;\r\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\r\n    if (!event.defaultPrevented && !ignoreClick.current) {\r\n      onOpenChange == null ? void 0 : onOpenChange(!open);\r\n    }\r\n    ignoreClick.current = false;\r\n  };\r\n  const createHandleButtonKeyDown = otherHandlers => event => {\r\n    var _otherHandlers$onKeyD;\r\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\r\n    if (event.defaultPrevented) {\r\n      return;\r\n    }\r\n    if (event.key === 'Enter') {\r\n      ignoreEnterKeyUp.current = true;\r\n    }\r\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\r\n      event.preventDefault();\r\n      onOpenChange == null ? void 0 : onOpenChange(true);\r\n    }\r\n  };\r\n  const createHandleListboxKeyUp = otherHandlers => event => {\r\n    var _otherHandlers$onKeyU;\r\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);\r\n    if (event.defaultPrevented) {\r\n      return;\r\n    }\r\n    const closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];\r\n    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {\r\n      var _buttonRef$current;\r\n      buttonRef == null ? void 0 : (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\r\n    }\r\n    ignoreEnterKeyUp.current = false;\r\n  };\r\n  const createHandleListboxItemClick = React.useCallback(otherHandlers => event => {\r\n    var _otherHandlers$onClic2;\r\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);\r\n    if (event.defaultPrevented) {\r\n      return;\r\n    }\r\n    if (!multiple) {\r\n      onOpenChange == null ? void 0 : onOpenChange(false);\r\n    }\r\n  }, [multiple, onOpenChange]);\r\n  const createHandleListboxBlur = otherHandlers => event => {\r\n    var _otherHandlers$onBlur;\r\n    otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);\r\n    if (!event.defaultPrevented) {\r\n      onOpenChange == null ? void 0 : onOpenChange(false);\r\n    }\r\n  };\r\n  const listboxReducer = React.useCallback((state, action) => {\r\n    const newState = defaultListboxReducer(state, action);\r\n\r\n    // change selection when listbox is closed\r\n    if (action.type === ActionTypes.keyDown && !open && (action.event.key === 'ArrowUp' || action.event.key === 'ArrowDown')) {\r\n      return _extends({}, newState, {\r\n        selectedValue: newState.highlightedValue\r\n      });\r\n    }\r\n    if (action.type === ActionTypes.blur || action.type === ActionTypes.setValue || action.type === ActionTypes.optionsChange) {\r\n      return _extends({}, newState, {\r\n        highlightedValue: newState.selectedValue\r\n      });\r\n    }\r\n    return newState;\r\n  }, [open]);\r\n  const {\r\n    getRootProps: getButtonRootProps,\r\n    active: buttonActive,\r\n    focusVisible: buttonFocusVisible\r\n  } = useButton({\r\n    disabled,\r\n    ref: handleButtonRef\r\n  });\r\n  const optionValues = React.useMemo(() => options.map(o => o.value), [options]);\r\n  let useListboxParameters;\r\n  const isOptionDisabled = React.useCallback(valueToCheck => {\r\n    var _option$disabled;\r\n    const option = optionsMap.get(valueToCheck);\r\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\r\n  }, [optionsMap]);\r\n  const stringifyOption = React.useCallback(valueToCheck => {\r\n    const option = optionsMap.get(valueToCheck);\r\n    if (!option) {\r\n      return '';\r\n    }\r\n    return optionStringifier(option);\r\n  }, [optionsMap, optionStringifier]);\r\n  if (props.multiple) {\r\n    const onChangeMultiple = onChange;\r\n    useListboxParameters = {\r\n      defaultValue: defaultValue,\r\n      id: listboxId,\r\n      isOptionDisabled,\r\n      listboxRef: handleListboxRef,\r\n      multiple: true,\r\n      onChange: (e, newValues) => {\r\n        onChangeMultiple == null ? void 0 : onChangeMultiple(e, newValues);\r\n      },\r\n      onHighlightChange: (e, newValue) => {\r\n        onHighlightChange == null ? void 0 : onHighlightChange(e, newValue != null ? newValue : null);\r\n      },\r\n      options: optionValues,\r\n      optionStringifier: stringifyOption,\r\n      value: valueProp\r\n    };\r\n  } else {\r\n    const onChangeSingle = onChange;\r\n    useListboxParameters = {\r\n      defaultValue: defaultValue,\r\n      id: listboxId,\r\n      isOptionDisabled,\r\n      listboxRef: handleListboxRef,\r\n      multiple: false,\r\n      onChange: (e, newValue) => {\r\n        onChangeSingle == null ? void 0 : onChangeSingle(e, newValue);\r\n      },\r\n      onHighlightChange: (e, newValue) => {\r\n        onHighlightChange == null ? void 0 : onHighlightChange(e, newValue);\r\n      },\r\n      options: optionValues,\r\n      optionStringifier: stringifyOption,\r\n      stateReducer: listboxReducer,\r\n      value: valueProp\r\n    };\r\n  }\r\n  const {\r\n    getRootProps: getListboxRootProps,\r\n    getOptionProps: getListboxOptionProps,\r\n    getOptionState,\r\n    highlightedOption,\r\n    selectedOption\r\n  } = useListbox(useListboxParameters);\r\n  React.useEffect(() => {\r\n    notifySelectionChanged(selectedOption);\r\n  }, [selectedOption, notifySelectionChanged]);\r\n  React.useEffect(() => {\r\n    notifyHighlightChanged(highlightedOption);\r\n  }, [highlightedOption, notifyHighlightChanged]);\r\n  const getButtonProps = (otherHandlers = {}) => {\r\n    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {\r\n      onClick: createHandleButtonClick(otherHandlers),\r\n      onMouseDown: createHandleMouseDown(otherHandlers),\r\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\r\n    })), {\r\n      role: 'combobox',\r\n      'aria-expanded': open,\r\n      'aria-haspopup': 'listbox',\r\n      'aria-controls': listboxId\r\n    });\r\n  };\r\n  const getListboxProps = (otherHandlers = {}) => getListboxRootProps(_extends({}, otherHandlers, {\r\n    onBlur: createHandleListboxBlur(otherHandlers),\r\n    onKeyUp: createHandleListboxKeyUp(otherHandlers)\r\n  }));\r\n  const getOptionProps = React.useCallback((optionValue, otherHandlers = {}) => {\r\n    return getListboxOptionProps(optionValue, _extends({}, otherHandlers, {\r\n      onClick: createHandleListboxItemClick(otherHandlers)\r\n    }));\r\n  }, [getListboxOptionProps, createHandleListboxItemClick]);\r\n  React.useDebugValue({\r\n    selectedOption,\r\n    highlightedOption,\r\n    open\r\n  });\r\n  const contextValue = React.useMemo(() => ({\r\n    listboxRef,\r\n    getOptionProps,\r\n    getOptionState,\r\n    registerHighlightChangeHandler,\r\n    registerSelectionChangeHandler\r\n  }), [getOptionProps, getOptionState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\r\n  return {\r\n    buttonActive,\r\n    buttonFocusVisible,\r\n    disabled,\r\n    getButtonProps,\r\n    getListboxProps,\r\n    contextValue,\r\n    open,\r\n    value: selectedOption,\r\n    highlightedOption\r\n  };\r\n}\r\nexport default useSelect;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,mBAAmB,IAAIC,UAAU,EAAEC,cAAc,IAAIC,KAAK,QAAQ,YAAY;AACvF,OAAOC,SAAS,MAAM,cAAc;AACpC,OAAOC,UAAU,IAAIC,qBAAqB,EAAEC,WAAW,QAAQ,eAAe;AAC9E,OAAOC,wBAAwB,MAAM,4CAA4C;AACjF,OAAOC,wBAAwB,MAAM,4BAA4B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAACC,KAAK,EAAE;EACxB,MAAM;IACJC,SAAS,EAAEC,aAAa;IACxBC,YAAY,EAAEC,gBAAgB;IAC9BC,QAAQ,GAAG,KAAK;IAChBC,SAAS,EAAEC,aAAa;IACxBC,UAAU,EAAEC,cAAc;IAC1BC,QAAQ,GAAG,KAAK;IAChBC,QAAQ;IACRC,iBAAiB;IACjBC,YAAY;IACZC,IAAI,GAAG,KAAK;IACZC,OAAO;IACPC,iBAAiB,GAAGnB,wBAAwB;IAC5CoB,KAAK,EAAEC;EACT,CAAC,GAAGlB,KAAK;EACT,MAAMC,SAAS,GAAGb,KAAK,CAAC+B,MAAM,CAAC,IAAI,CAAC;EACpC,MAAMC,eAAe,GAAG9B,UAAU,CAACY,aAAa,EAAED,SAAS,CAAC;EAC5D,MAAMO,UAAU,GAAGpB,KAAK,CAAC+B,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMb,SAAS,GAAGd,KAAK,CAACe,aAAa,CAAC;EACtC,IAAIJ,YAAY,GAAGC,gBAAgB;EACnC,IAAIc,SAAS,KAAKG,SAAS,IAAIjB,gBAAgB,KAAKiB,SAAS,EAAE;IAC7DlB,YAAY,GAAGO,QAAQ,GAAG,EAAE,GAAG,IAAI;EACrC;EACA,MAAMY,UAAU,GAAGlC,KAAK,CAACmC,OAAO,CAAC,MAAM;IACrC,MAAMC,GAAG,GAAG,IAAIC,GAAG,EAAE;IACrBV,OAAO,CAACW,OAAO,CAACC,MAAM,IAAI;MACxBH,GAAG,CAACI,GAAG,CAACD,MAAM,CAACV,KAAK,EAAEU,MAAM,CAAC;IAC/B,CAAC,CAAC;IACF,OAAOH,GAAG;EACZ,CAAC,EAAE,CAACT,OAAO,CAAC,CAAC;;EAEb;EACA,MAAMc,gBAAgB,GAAGzC,KAAK,CAAC+B,MAAM,CAAC,KAAK,CAAC;;EAE5C;EACA;EACA,MAAMW,WAAW,GAAG1C,KAAK,CAAC+B,MAAM,CAAC,KAAK,CAAC;;EAEvC;EACA,MAAM,CAACY,qBAAqB,EAAEC,mBAAmB,CAAC,GAAG5C,KAAK,CAAC6C,QAAQ,CAAC,KAAK,CAAC;EAC1E,MAAMC,uBAAuB,GAAG9C,KAAK,CAAC+C,WAAW,CAAC,MAAM;IACtD,IAAIJ,qBAAqB,IAAIvB,UAAU,CAAC4B,OAAO,IAAI,IAAI,EAAE;MACvD5B,UAAU,CAAC4B,OAAO,CAACC,KAAK,EAAE;MAC1BL,mBAAmB,CAAC,KAAK,CAAC;IAC5B;EACF,CAAC,EAAE,CAACD,qBAAqB,CAAC,CAAC;EAC3B,MAAMO,gBAAgB,GAAGhD,UAAU,CAACmB,cAAc,EAAED,UAAU,EAAE0B,uBAAuB,CAAC;EACxF,MAAM;IACJK,sBAAsB;IACtBC,sBAAsB;IACtBC,8BAA8B;IAC9BC;EACF,CAAC,GAAG5C,wBAAwB,EAAE;EAC9BV,KAAK,CAACuD,SAAS,CAAC,MAAM;IACpBT,uBAAuB,EAAE;EAC3B,CAAC,EAAE,CAACA,uBAAuB,CAAC,CAAC;EAC7B9C,KAAK,CAACuD,SAAS,CAAC,MAAM;IACpBX,mBAAmB,CAAClB,IAAI,CAAC;EAC3B,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EACV,MAAM8B,qBAAqB,GAAGC,aAAa,IAAIC,KAAK,IAAI;IACtD,IAAIC,qBAAqB;IACzBF,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAACE,qBAAqB,GAAGF,aAAa,CAACG,WAAW,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,qBAAqB,CAACE,IAAI,CAACJ,aAAa,EAAEC,KAAK,CAAC;IACxJ,IAAI,CAACA,KAAK,CAACI,gBAAgB,IAAIpC,IAAI,EAAE;MACnCgB,WAAW,CAACM,OAAO,GAAG,IAAI;IAC5B;EACF,CAAC;EACD,MAAMe,uBAAuB,GAAGN,aAAa,IAAIC,KAAK,IAAI;IACxD,IAAIM,qBAAqB;IACzBP,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAACO,qBAAqB,GAAGP,aAAa,CAACQ,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,qBAAqB,CAACH,IAAI,CAACJ,aAAa,EAAEC,KAAK,CAAC;IACpJ,IAAI,CAACA,KAAK,CAACI,gBAAgB,IAAI,CAACpB,WAAW,CAACM,OAAO,EAAE;MACnDvB,YAAY,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,YAAY,CAAC,CAACC,IAAI,CAAC;IACrD;IACAgB,WAAW,CAACM,OAAO,GAAG,KAAK;EAC7B,CAAC;EACD,MAAMkB,yBAAyB,GAAGT,aAAa,IAAIC,KAAK,IAAI;IAC1D,IAAIS,qBAAqB;IACzBV,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAACU,qBAAqB,GAAGV,aAAa,CAACW,SAAS,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,qBAAqB,CAACN,IAAI,CAACJ,aAAa,EAAEC,KAAK,CAAC;IACtJ,IAAIA,KAAK,CAACI,gBAAgB,EAAE;MAC1B;IACF;IACA,IAAIJ,KAAK,CAACW,GAAG,KAAK,OAAO,EAAE;MACzB5B,gBAAgB,CAACO,OAAO,GAAG,IAAI;IACjC;IACA,IAAIU,KAAK,CAACW,GAAG,KAAK,WAAW,IAAIX,KAAK,CAACW,GAAG,KAAK,SAAS,EAAE;MACxDX,KAAK,CAACY,cAAc,EAAE;MACtB7C,YAAY,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,YAAY,CAAC,IAAI,CAAC;IACpD;EACF,CAAC;EACD,MAAM8C,wBAAwB,GAAGd,aAAa,IAAIC,KAAK,IAAI;IACzD,IAAIc,qBAAqB;IACzBf,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAACe,qBAAqB,GAAGf,aAAa,CAACgB,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,qBAAqB,CAACX,IAAI,CAACJ,aAAa,EAAEC,KAAK,CAAC;IACpJ,IAAIA,KAAK,CAACI,gBAAgB,EAAE;MAC1B;IACF;IACA,MAAMY,WAAW,GAAGpD,QAAQ,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,GAAG,CAAC;IACpE,IAAII,IAAI,IAAI,CAACe,gBAAgB,CAACO,OAAO,IAAI0B,WAAW,CAACC,QAAQ,CAACjB,KAAK,CAACW,GAAG,CAAC,EAAE;MACxE,IAAIO,kBAAkB;MACtB/D,SAAS,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC+D,kBAAkB,GAAG/D,SAAS,CAACmC,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG4B,kBAAkB,CAAC3B,KAAK,EAAE;IACrH;IACAR,gBAAgB,CAACO,OAAO,GAAG,KAAK;EAClC,CAAC;EACD,MAAM6B,4BAA4B,GAAG7E,KAAK,CAAC+C,WAAW,CAACU,aAAa,IAAIC,KAAK,IAAI;IAC/E,IAAIoB,sBAAsB;IAC1BrB,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAACqB,sBAAsB,GAAGrB,aAAa,CAACQ,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGa,sBAAsB,CAACjB,IAAI,CAACJ,aAAa,EAAEC,KAAK,CAAC;IACtJ,IAAIA,KAAK,CAACI,gBAAgB,EAAE;MAC1B;IACF;IACA,IAAI,CAACxC,QAAQ,EAAE;MACbG,YAAY,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,YAAY,CAAC,KAAK,CAAC;IACrD;EACF,CAAC,EAAE,CAACH,QAAQ,EAAEG,YAAY,CAAC,CAAC;EAC5B,MAAMsD,uBAAuB,GAAGtB,aAAa,IAAIC,KAAK,IAAI;IACxD,IAAIsB,qBAAqB;IACzBvB,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAACuB,qBAAqB,GAAGvB,aAAa,CAACwB,MAAM,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,qBAAqB,CAACnB,IAAI,CAACJ,aAAa,EAAEC,KAAK,CAAC;IACnJ,IAAI,CAACA,KAAK,CAACI,gBAAgB,EAAE;MAC3BrC,YAAY,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,YAAY,CAAC,KAAK,CAAC;IACrD;EACF,CAAC;EACD,MAAMyD,cAAc,GAAGlF,KAAK,CAAC+C,WAAW,CAAC,CAACoC,KAAK,EAAEC,MAAM,KAAK;IAC1D,MAAMC,QAAQ,GAAG9E,qBAAqB,CAAC4E,KAAK,EAAEC,MAAM,CAAC;;IAErD;IACA,IAAIA,MAAM,CAACE,IAAI,KAAK9E,WAAW,CAAC+E,OAAO,IAAI,CAAC7D,IAAI,KAAK0D,MAAM,CAAC1B,KAAK,CAACW,GAAG,KAAK,SAAS,IAAIe,MAAM,CAAC1B,KAAK,CAACW,GAAG,KAAK,WAAW,CAAC,EAAE;MACxH,OAAOtE,QAAQ,CAAC,CAAC,CAAC,EAAEsF,QAAQ,EAAE;QAC5BG,aAAa,EAAEH,QAAQ,CAACI;MAC1B,CAAC,CAAC;IACJ;IACA,IAAIL,MAAM,CAACE,IAAI,KAAK9E,WAAW,CAACkF,IAAI,IAAIN,MAAM,CAACE,IAAI,KAAK9E,WAAW,CAACmF,QAAQ,IAAIP,MAAM,CAACE,IAAI,KAAK9E,WAAW,CAACoF,aAAa,EAAE;MACzH,OAAO7F,QAAQ,CAAC,CAAC,CAAC,EAAEsF,QAAQ,EAAE;QAC5BI,gBAAgB,EAAEJ,QAAQ,CAACG;MAC7B,CAAC,CAAC;IACJ;IACA,OAAOH,QAAQ;EACjB,CAAC,EAAE,CAAC3D,IAAI,CAAC,CAAC;EACV,MAAM;IACJmE,YAAY,EAAEC,kBAAkB;IAChCC,MAAM,EAAEC,YAAY;IACpBC,YAAY,EAAEC;EAChB,CAAC,GAAG7F,SAAS,CAAC;IACZY,QAAQ;IACRkF,GAAG,EAAEnE;EACP,CAAC,CAAC;EACF,MAAMoE,YAAY,GAAGpG,KAAK,CAACmC,OAAO,CAAC,MAAMR,OAAO,CAACS,GAAG,CAACiE,CAAC,IAAIA,CAAC,CAACxE,KAAK,CAAC,EAAE,CAACF,OAAO,CAAC,CAAC;EAC9E,IAAI2E,oBAAoB;EACxB,MAAMC,gBAAgB,GAAGvG,KAAK,CAAC+C,WAAW,CAACyD,YAAY,IAAI;IACzD,IAAIC,gBAAgB;IACpB,MAAMlE,MAAM,GAAGL,UAAU,CAACwE,GAAG,CAACF,YAAY,CAAC;IAC3C,OAAO,CAACC,gBAAgB,GAAGlE,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACtB,QAAQ,KAAK,IAAI,GAAGwF,gBAAgB,GAAG,KAAK;EAC1G,CAAC,EAAE,CAACvE,UAAU,CAAC,CAAC;EAChB,MAAMyE,eAAe,GAAG3G,KAAK,CAAC+C,WAAW,CAACyD,YAAY,IAAI;IACxD,MAAMjE,MAAM,GAAGL,UAAU,CAACwE,GAAG,CAACF,YAAY,CAAC;IAC3C,IAAI,CAACjE,MAAM,EAAE;MACX,OAAO,EAAE;IACX;IACA,OAAOX,iBAAiB,CAACW,MAAM,CAAC;EAClC,CAAC,EAAE,CAACL,UAAU,EAAEN,iBAAiB,CAAC,CAAC;EACnC,IAAIhB,KAAK,CAACU,QAAQ,EAAE;IAClB,MAAMsF,gBAAgB,GAAGrF,QAAQ;IACjC+E,oBAAoB,GAAG;MACrBvF,YAAY,EAAEA,YAAY;MAC1B8F,EAAE,EAAE3F,SAAS;MACbqF,gBAAgB;MAChBnF,UAAU,EAAE8B,gBAAgB;MAC5B5B,QAAQ,EAAE,IAAI;MACdC,QAAQ,EAAEA,CAACuF,CAAC,EAAEC,SAAS,KAAK;QAC1BH,gBAAgB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,gBAAgB,CAACE,CAAC,EAAEC,SAAS,CAAC;MACpE,CAAC;MACDvF,iBAAiB,EAAEA,CAACsF,CAAC,EAAEE,QAAQ,KAAK;QAClCxF,iBAAiB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACsF,CAAC,EAAEE,QAAQ,IAAI,IAAI,GAAGA,QAAQ,GAAG,IAAI,CAAC;MAC/F,CAAC;MACDrF,OAAO,EAAEyE,YAAY;MACrBxE,iBAAiB,EAAE+E,eAAe;MAClC9E,KAAK,EAAEC;IACT,CAAC;EACH,CAAC,MAAM;IACL,MAAMmF,cAAc,GAAG1F,QAAQ;IAC/B+E,oBAAoB,GAAG;MACrBvF,YAAY,EAAEA,YAAY;MAC1B8F,EAAE,EAAE3F,SAAS;MACbqF,gBAAgB;MAChBnF,UAAU,EAAE8B,gBAAgB;MAC5B5B,QAAQ,EAAE,KAAK;MACfC,QAAQ,EAAEA,CAACuF,CAAC,EAAEE,QAAQ,KAAK;QACzBC,cAAc,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACH,CAAC,EAAEE,QAAQ,CAAC;MAC/D,CAAC;MACDxF,iBAAiB,EAAEA,CAACsF,CAAC,EAAEE,QAAQ,KAAK;QAClCxF,iBAAiB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACsF,CAAC,EAAEE,QAAQ,CAAC;MACrE,CAAC;MACDrF,OAAO,EAAEyE,YAAY;MACrBxE,iBAAiB,EAAE+E,eAAe;MAClCO,YAAY,EAAEhC,cAAc;MAC5BrD,KAAK,EAAEC;IACT,CAAC;EACH;EACA,MAAM;IACJ+D,YAAY,EAAEsB,mBAAmB;IACjCC,cAAc,EAAEC,qBAAqB;IACrCC,cAAc;IACdC,iBAAiB;IACjBC;EACF,CAAC,GAAGlH,UAAU,CAACgG,oBAAoB,CAAC;EACpCtG,KAAK,CAACuD,SAAS,CAAC,MAAM;IACpBJ,sBAAsB,CAACqE,cAAc,CAAC;EACxC,CAAC,EAAE,CAACA,cAAc,EAAErE,sBAAsB,CAAC,CAAC;EAC5CnD,KAAK,CAACuD,SAAS,CAAC,MAAM;IACpBH,sBAAsB,CAACmE,iBAAiB,CAAC;EAC3C,CAAC,EAAE,CAACA,iBAAiB,EAAEnE,sBAAsB,CAAC,CAAC;EAC/C,MAAMqE,cAAc,GAAG,SAAAA,CAAA,EAAwB;IAAA,IAAvBhE,aAAa,GAAAiE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAzF,SAAA,GAAAyF,SAAA,MAAG,CAAC,CAAC;IACxC,OAAO3H,QAAQ,CAAC,CAAC,CAAC,EAAE+F,kBAAkB,CAAC/F,QAAQ,CAAC,CAAC,CAAC,EAAE0D,aAAa,EAAE;MACjEQ,OAAO,EAAEF,uBAAuB,CAACN,aAAa,CAAC;MAC/CG,WAAW,EAAEJ,qBAAqB,CAACC,aAAa,CAAC;MACjDW,SAAS,EAAEF,yBAAyB,CAACT,aAAa;IACpD,CAAC,CAAC,CAAC,EAAE;MACHmE,IAAI,EAAE,UAAU;MAChB,eAAe,EAAElG,IAAI;MACrB,eAAe,EAAE,SAAS;MAC1B,eAAe,EAAER;IACnB,CAAC,CAAC;EACJ,CAAC;EACD,MAAM2G,eAAe,GAAG,SAAAA,CAAA;IAAA,IAACpE,aAAa,GAAAiE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAzF,SAAA,GAAAyF,SAAA,MAAG,CAAC,CAAC;IAAA,OAAKP,mBAAmB,CAACpH,QAAQ,CAAC,CAAC,CAAC,EAAE0D,aAAa,EAAE;MAC9FwB,MAAM,EAAEF,uBAAuB,CAACtB,aAAa,CAAC;MAC9CgB,OAAO,EAAEF,wBAAwB,CAACd,aAAa;IACjD,CAAC,CAAC,CAAC;EAAA;EACH,MAAM2D,cAAc,GAAGpH,KAAK,CAAC+C,WAAW,CAAC,UAAC+E,WAAW,EAAyB;IAAA,IAAvBrE,aAAa,GAAAiE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAzF,SAAA,GAAAyF,SAAA,MAAG,CAAC,CAAC;IACvE,OAAOL,qBAAqB,CAACS,WAAW,EAAE/H,QAAQ,CAAC,CAAC,CAAC,EAAE0D,aAAa,EAAE;MACpEQ,OAAO,EAAEY,4BAA4B,CAACpB,aAAa;IACrD,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAAC4D,qBAAqB,EAAExC,4BAA4B,CAAC,CAAC;EACzD7E,KAAK,CAAC+H,aAAa,CAAC;IAClBP,cAAc;IACdD,iBAAiB;IACjB7F;EACF,CAAC,CAAC;EACF,MAAMsG,YAAY,GAAGhI,KAAK,CAACmC,OAAO,CAAC,OAAO;IACxCf,UAAU;IACVgG,cAAc;IACdE,cAAc;IACdjE,8BAA8B;IAC9BC;EACF,CAAC,CAAC,EAAE,CAAC8D,cAAc,EAAEE,cAAc,EAAEjE,8BAA8B,EAAEC,8BAA8B,CAAC,CAAC;EACrG,OAAO;IACL0C,YAAY;IACZE,kBAAkB;IAClBjF,QAAQ;IACRwG,cAAc;IACdI,eAAe;IACfG,YAAY;IACZtG,IAAI;IACJG,KAAK,EAAE2F,cAAc;IACrBD;EACF,CAAC;AACH;AACA,eAAe5G,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}