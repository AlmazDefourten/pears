{"ast":null,"code":"/**\r\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\r\n * element, so even though these handlers might all be triggered by different\r\n * observers, we can keep them in the same map.\r\n */\nconst observerCallbacks = new WeakMap();\n/**\r\n * Multiple observers can be created for multiple element/document roots. Each with\r\n * different settings. So here we store dictionaries of observers to each root,\r\n * using serialised settings (threshold/margin) as lookup keys.\r\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = entry => {\n  const callback = observerCallbacks.get(entry.target);\n  callback && callback(entry);\n};\nconst fireAllObserverCallbacks = entries => {\n  entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver(_ref) {\n  let {\n    root,\n    ...options\n  } = _ref;\n  const lookupRoot = root || document;\n  /**\r\n   * If we don't have an observer lookup map for this root, create one.\r\n   */\n  if (!observers.has(lookupRoot)) {\n    observers.set(lookupRoot, {});\n  }\n  const rootObservers = observers.get(lookupRoot);\n  const key = JSON.stringify(options);\n  /**\r\n   * If we don't have an observer for this combination of root and settings,\r\n   * create one.\r\n   */\n  if (!rootObservers[key]) {\n    rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, {\n      root,\n      ...options\n    });\n  }\n  return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n  const rootInteresectionObserver = initIntersectionObserver(options);\n  observerCallbacks.set(element, callback);\n  rootInteresectionObserver.observe(element);\n  return () => {\n    observerCallbacks.delete(element);\n    rootInteresectionObserver.unobserve(element);\n  };\n}\nexport { observeIntersection };","map":{"version":3,"names":["observerCallbacks","WeakMap","observers","fireObserverCallback","entry","callback","get","target","fireAllObserverCallbacks","entries","forEach","initIntersectionObserver","_ref","root","options","lookupRoot","document","has","set","rootObservers","key","JSON","stringify","IntersectionObserver","observeIntersection","element","rootInteresectionObserver","observe","delete","unobserve"],"sources":["C:/Users/Кирилл/Desktop/gdfjtgj/pears/frontend/node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs"],"sourcesContent":["/**\r\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\r\n * element, so even though these handlers might all be triggered by different\r\n * observers, we can keep them in the same map.\r\n */\r\nconst observerCallbacks = new WeakMap();\r\n/**\r\n * Multiple observers can be created for multiple element/document roots. Each with\r\n * different settings. So here we store dictionaries of observers to each root,\r\n * using serialised settings (threshold/margin) as lookup keys.\r\n */\r\nconst observers = new WeakMap();\r\nconst fireObserverCallback = (entry) => {\r\n    const callback = observerCallbacks.get(entry.target);\r\n    callback && callback(entry);\r\n};\r\nconst fireAllObserverCallbacks = (entries) => {\r\n    entries.forEach(fireObserverCallback);\r\n};\r\nfunction initIntersectionObserver({ root, ...options }) {\r\n    const lookupRoot = root || document;\r\n    /**\r\n     * If we don't have an observer lookup map for this root, create one.\r\n     */\r\n    if (!observers.has(lookupRoot)) {\r\n        observers.set(lookupRoot, {});\r\n    }\r\n    const rootObservers = observers.get(lookupRoot);\r\n    const key = JSON.stringify(options);\r\n    /**\r\n     * If we don't have an observer for this combination of root and settings,\r\n     * create one.\r\n     */\r\n    if (!rootObservers[key]) {\r\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\r\n    }\r\n    return rootObservers[key];\r\n}\r\nfunction observeIntersection(element, options, callback) {\r\n    const rootInteresectionObserver = initIntersectionObserver(options);\r\n    observerCallbacks.set(element, callback);\r\n    rootInteresectionObserver.observe(element);\r\n    return () => {\r\n        observerCallbacks.delete(element);\r\n        rootInteresectionObserver.unobserve(element);\r\n    };\r\n}\r\n\r\nexport { observeIntersection };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,iBAAiB,GAAG,IAAIC,OAAO,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,IAAID,OAAO,EAAE;AAC/B,MAAME,oBAAoB,GAAIC,KAAK,IAAK;EACpC,MAAMC,QAAQ,GAAGL,iBAAiB,CAACM,GAAG,CAACF,KAAK,CAACG,MAAM,CAAC;EACpDF,QAAQ,IAAIA,QAAQ,CAACD,KAAK,CAAC;AAC/B,CAAC;AACD,MAAMI,wBAAwB,GAAIC,OAAO,IAAK;EAC1CA,OAAO,CAACC,OAAO,CAACP,oBAAoB,CAAC;AACzC,CAAC;AACD,SAASQ,wBAAwBA,CAAAC,IAAA,EAAuB;EAAA,IAAtB;IAAEC,IAAI;IAAE,GAAGC;EAAQ,CAAC,GAAAF,IAAA;EAClD,MAAMG,UAAU,GAAGF,IAAI,IAAIG,QAAQ;EACnC;AACJ;AACA;EACI,IAAI,CAACd,SAAS,CAACe,GAAG,CAACF,UAAU,CAAC,EAAE;IAC5Bb,SAAS,CAACgB,GAAG,CAACH,UAAU,EAAE,CAAC,CAAC,CAAC;EACjC;EACA,MAAMI,aAAa,GAAGjB,SAAS,CAACI,GAAG,CAACS,UAAU,CAAC;EAC/C,MAAMK,GAAG,GAAGC,IAAI,CAACC,SAAS,CAACR,OAAO,CAAC;EACnC;AACJ;AACA;AACA;EACI,IAAI,CAACK,aAAa,CAACC,GAAG,CAAC,EAAE;IACrBD,aAAa,CAACC,GAAG,CAAC,GAAG,IAAIG,oBAAoB,CAACf,wBAAwB,EAAE;MAAEK,IAAI;MAAE,GAAGC;IAAQ,CAAC,CAAC;EACjG;EACA,OAAOK,aAAa,CAACC,GAAG,CAAC;AAC7B;AACA,SAASI,mBAAmBA,CAACC,OAAO,EAAEX,OAAO,EAAET,QAAQ,EAAE;EACrD,MAAMqB,yBAAyB,GAAGf,wBAAwB,CAACG,OAAO,CAAC;EACnEd,iBAAiB,CAACkB,GAAG,CAACO,OAAO,EAAEpB,QAAQ,CAAC;EACxCqB,yBAAyB,CAACC,OAAO,CAACF,OAAO,CAAC;EAC1C,OAAO,MAAM;IACTzB,iBAAiB,CAAC4B,MAAM,CAACH,OAAO,CAAC;IACjCC,yBAAyB,CAACG,SAAS,CAACJ,OAAO,CAAC;EAChD,CAAC;AACL;AAEA,SAASD,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}