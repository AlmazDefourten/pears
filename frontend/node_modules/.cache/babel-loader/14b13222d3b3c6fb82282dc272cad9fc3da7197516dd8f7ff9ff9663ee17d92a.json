{"ast":null,"code":"import * as React from 'react';\nimport { useId, useRef, useInsertionEffect } from 'react';\n\n/**\r\n * Measurement functionality has to be within a separate component\r\n * to leverage snapshot lifecycle.\r\n */\nclass PopChildMeasure extends React.Component {\n  getSnapshotBeforeUpdate(prevProps) {\n    const element = this.props.childRef.current;\n    if (element && prevProps.isPresent && !this.props.isPresent) {\n      const size = this.props.sizeRef.current;\n      size.height = element.offsetHeight || 0;\n      size.width = element.offsetWidth || 0;\n      size.top = element.offsetTop;\n      size.left = element.offsetLeft;\n    }\n    return null;\n  }\n  /**\r\n   * Required with getSnapshotBeforeUpdate to stop React complaining.\r\n   */\n  componentDidUpdate() {}\n  render() {\n    return this.props.children;\n  }\n}\nfunction PopChild(_ref) {\n  let {\n    children,\n    isPresent\n  } = _ref;\n  const id = useId();\n  const ref = useRef(null);\n  const size = useRef({\n    width: 0,\n    height: 0,\n    top: 0,\n    left: 0\n  });\n  /**\r\n   * We create and inject a style block so we can apply this explicit\r\n   * sizing in a non-destructive manner by just deleting the style block.\r\n   *\r\n   * We can't apply size via render as the measurement happens\r\n   * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\r\n   * styles directly on the DOM node, we might be overwriting\r\n   * styles set via the style prop.\r\n   */\n  useInsertionEffect(() => {\n    const {\n      width,\n      height,\n      top,\n      left\n    } = size.current;\n    if (isPresent || !ref.current || !width || !height) return;\n    ref.current.dataset.motionPopId = id;\n    const style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    if (style.sheet) {\n      style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            top: ${top}px !important;\n            left: ${left}px !important;\n          }\n        `);\n    }\n    return () => {\n      document.head.removeChild(style);\n    };\n  }, [isPresent]);\n  return React.createElement(PopChildMeasure, {\n    isPresent: isPresent,\n    childRef: ref,\n    sizeRef: size\n  }, React.cloneElement(children, {\n    ref\n  }));\n}\nexport { PopChild };","map":{"version":3,"names":["React","useId","useRef","useInsertionEffect","PopChildMeasure","Component","getSnapshotBeforeUpdate","prevProps","element","props","childRef","current","isPresent","size","sizeRef","height","offsetHeight","width","offsetWidth","top","offsetTop","left","offsetLeft","componentDidUpdate","render","children","PopChild","_ref","id","ref","dataset","motionPopId","style","document","createElement","head","appendChild","sheet","insertRule","removeChild","cloneElement"],"sources":["C:/Users/Кирилл/Desktop/gdfjtgj/pears/frontend/node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs"],"sourcesContent":["import * as React from 'react';\r\nimport { useId, useRef, useInsertionEffect } from 'react';\r\n\r\n/**\r\n * Measurement functionality has to be within a separate component\r\n * to leverage snapshot lifecycle.\r\n */\r\nclass PopChildMeasure extends React.Component {\r\n    getSnapshotBeforeUpdate(prevProps) {\r\n        const element = this.props.childRef.current;\r\n        if (element && prevProps.isPresent && !this.props.isPresent) {\r\n            const size = this.props.sizeRef.current;\r\n            size.height = element.offsetHeight || 0;\r\n            size.width = element.offsetWidth || 0;\r\n            size.top = element.offsetTop;\r\n            size.left = element.offsetLeft;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\r\n     */\r\n    componentDidUpdate() { }\r\n    render() {\r\n        return this.props.children;\r\n    }\r\n}\r\nfunction PopChild({ children, isPresent }) {\r\n    const id = useId();\r\n    const ref = useRef(null);\r\n    const size = useRef({\r\n        width: 0,\r\n        height: 0,\r\n        top: 0,\r\n        left: 0,\r\n    });\r\n    /**\r\n     * We create and inject a style block so we can apply this explicit\r\n     * sizing in a non-destructive manner by just deleting the style block.\r\n     *\r\n     * We can't apply size via render as the measurement happens\r\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\r\n     * styles directly on the DOM node, we might be overwriting\r\n     * styles set via the style prop.\r\n     */\r\n    useInsertionEffect(() => {\r\n        const { width, height, top, left } = size.current;\r\n        if (isPresent || !ref.current || !width || !height)\r\n            return;\r\n        ref.current.dataset.motionPopId = id;\r\n        const style = document.createElement(\"style\");\r\n        document.head.appendChild(style);\r\n        if (style.sheet) {\r\n            style.sheet.insertRule(`\r\n          [data-motion-pop-id=\"${id}\"] {\r\n            position: absolute !important;\r\n            width: ${width}px !important;\r\n            height: ${height}px !important;\r\n            top: ${top}px !important;\r\n            left: ${left}px !important;\r\n          }\r\n        `);\r\n        }\r\n        return () => {\r\n            document.head.removeChild(style);\r\n        };\r\n    }, [isPresent]);\r\n    return (React.createElement(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size }, React.cloneElement(children, { ref })));\r\n}\r\n\r\nexport { PopChild };\r\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,KAAK,EAAEC,MAAM,EAAEC,kBAAkB,QAAQ,OAAO;;AAEzD;AACA;AACA;AACA;AACA,MAAMC,eAAe,SAASJ,KAAK,CAACK,SAAS,CAAC;EAC1CC,uBAAuBA,CAACC,SAAS,EAAE;IAC/B,MAAMC,OAAO,GAAG,IAAI,CAACC,KAAK,CAACC,QAAQ,CAACC,OAAO;IAC3C,IAAIH,OAAO,IAAID,SAAS,CAACK,SAAS,IAAI,CAAC,IAAI,CAACH,KAAK,CAACG,SAAS,EAAE;MACzD,MAAMC,IAAI,GAAG,IAAI,CAACJ,KAAK,CAACK,OAAO,CAACH,OAAO;MACvCE,IAAI,CAACE,MAAM,GAAGP,OAAO,CAACQ,YAAY,IAAI,CAAC;MACvCH,IAAI,CAACI,KAAK,GAAGT,OAAO,CAACU,WAAW,IAAI,CAAC;MACrCL,IAAI,CAACM,GAAG,GAAGX,OAAO,CAACY,SAAS;MAC5BP,IAAI,CAACQ,IAAI,GAAGb,OAAO,CAACc,UAAU;IAClC;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;EACIC,kBAAkBA,CAAA,EAAG,CAAE;EACvBC,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAACf,KAAK,CAACgB,QAAQ;EAC9B;AACJ;AACA,SAASC,QAAQA,CAAAC,IAAA,EAA0B;EAAA,IAAzB;IAAEF,QAAQ;IAAEb;EAAU,CAAC,GAAAe,IAAA;EACrC,MAAMC,EAAE,GAAG3B,KAAK,EAAE;EAClB,MAAM4B,GAAG,GAAG3B,MAAM,CAAC,IAAI,CAAC;EACxB,MAAMW,IAAI,GAAGX,MAAM,CAAC;IAChBe,KAAK,EAAE,CAAC;IACRF,MAAM,EAAE,CAAC;IACTI,GAAG,EAAE,CAAC;IACNE,IAAI,EAAE;EACV,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIlB,kBAAkB,CAAC,MAAM;IACrB,MAAM;MAAEc,KAAK;MAAEF,MAAM;MAAEI,GAAG;MAAEE;IAAK,CAAC,GAAGR,IAAI,CAACF,OAAO;IACjD,IAAIC,SAAS,IAAI,CAACiB,GAAG,CAAClB,OAAO,IAAI,CAACM,KAAK,IAAI,CAACF,MAAM,EAC9C;IACJc,GAAG,CAAClB,OAAO,CAACmB,OAAO,CAACC,WAAW,GAAGH,EAAE;IACpC,MAAMI,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IAC7CD,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACJ,KAAK,CAAC;IAChC,IAAIA,KAAK,CAACK,KAAK,EAAE;MACbL,KAAK,CAACK,KAAK,CAACC,UAAU,CAAE;AACpC,iCAAiCV,EAAG;AACpC;AACA,qBAAqBX,KAAM;AAC3B,sBAAsBF,MAAO;AAC7B,mBAAmBI,GAAI;AACvB,oBAAoBE,IAAK;AACzB;AACA,SAAS,CAAC;IACF;IACA,OAAO,MAAM;MACTY,QAAQ,CAACE,IAAI,CAACI,WAAW,CAACP,KAAK,CAAC;IACpC,CAAC;EACL,CAAC,EAAE,CAACpB,SAAS,CAAC,CAAC;EACf,OAAQZ,KAAK,CAACkC,aAAa,CAAC9B,eAAe,EAAE;IAAEQ,SAAS,EAAEA,SAAS;IAAEF,QAAQ,EAAEmB,GAAG;IAAEf,OAAO,EAAED;EAAK,CAAC,EAAEb,KAAK,CAACwC,YAAY,CAACf,QAAQ,EAAE;IAAEI;EAAI,CAAC,CAAC,CAAC;AAC/I;AAEA,SAASH,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}