{"ast":null,"code":"import { noopReturn, addUniqueItem } from '@motionone/utils';\nimport { getAnimationData } from '../data.es.js';\n\n/**\r\n * A list of all transformable axes. We'll use this list to generated a version\r\n * of each axes for each transform.\r\n */\nconst axes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\r\n * An ordered array of each transformable value. By default, transform values\r\n * will be sorted to this order.\r\n */\nconst order = [\"translate\", \"scale\", \"rotate\", \"skew\"];\nconst transformAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\"\n};\nconst rotation = {\n  syntax: \"<angle>\",\n  initialValue: \"0deg\",\n  toDefaultUnit: v => v + \"deg\"\n};\nconst baseTransformProperties = {\n  translate: {\n    syntax: \"<length-percentage>\",\n    initialValue: \"0px\",\n    toDefaultUnit: v => v + \"px\"\n  },\n  rotate: rotation,\n  scale: {\n    syntax: \"<number>\",\n    initialValue: 1,\n    toDefaultUnit: noopReturn\n  },\n  skew: rotation\n};\nconst transformDefinitions = new Map();\nconst asTransformCssVar = name => `--motion-${name}`;\n/**\r\n * Generate a list of every possible transform key\r\n */\nconst transforms = [\"x\", \"y\", \"z\"];\norder.forEach(name => {\n  axes.forEach(axis => {\n    transforms.push(name + axis);\n    transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);\n  });\n});\n/**\r\n * A function to use with Array.sort to sort transform keys by their default order.\r\n */\nconst compareTransformOrder = (a, b) => transforms.indexOf(a) - transforms.indexOf(b);\n/**\r\n * Provide a quick way to check if a string is the name of a transform\r\n */\nconst transformLookup = new Set(transforms);\nconst isTransform = name => transformLookup.has(name);\nconst addTransformToElement = (element, name) => {\n  // Map x to translateX etc\n  if (transformAlias[name]) name = transformAlias[name];\n  const {\n    transforms\n  } = getAnimationData(element);\n  addUniqueItem(transforms, name);\n  /**\r\n   * TODO: An optimisation here could be to cache the transform in element data\r\n   * and only update if this has changed.\r\n   */\n  element.style.transform = buildTransformTemplate(transforms);\n};\nconst buildTransformTemplate = transforms => transforms.sort(compareTransformOrder).reduce(transformListToString, \"\").trim();\nconst transformListToString = (template, name) => `${template} ${name}(var(${asTransformCssVar(name)}))`;\nexport { addTransformToElement, asTransformCssVar, axes, buildTransformTemplate, compareTransformOrder, isTransform, transformAlias, transformDefinitions };","map":{"version":3,"names":["noopReturn","addUniqueItem","getAnimationData","axes","order","transformAlias","x","y","z","rotation","syntax","initialValue","toDefaultUnit","v","baseTransformProperties","translate","rotate","scale","skew","transformDefinitions","Map","asTransformCssVar","name","transforms","forEach","axis","push","set","compareTransformOrder","a","b","indexOf","transformLookup","Set","isTransform","has","addTransformToElement","element","style","transform","buildTransformTemplate","sort","reduce","transformListToString","trim","template"],"sources":["C:/Users/Кирилл/Desktop/here/pears/frontend/node_modules/@motionone/dom/dist/animate/utils/transforms.es.js"],"sourcesContent":["import { noopReturn, addUniqueItem } from '@motionone/utils';\r\nimport { getAnimationData } from '../data.es.js';\r\n\r\n/**\r\n * A list of all transformable axes. We'll use this list to generated a version\r\n * of each axes for each transform.\r\n */\r\nconst axes = [\"\", \"X\", \"Y\", \"Z\"];\r\n/**\r\n * An ordered array of each transformable value. By default, transform values\r\n * will be sorted to this order.\r\n */\r\nconst order = [\"translate\", \"scale\", \"rotate\", \"skew\"];\r\nconst transformAlias = {\r\n    x: \"translateX\",\r\n    y: \"translateY\",\r\n    z: \"translateZ\",\r\n};\r\nconst rotation = {\r\n    syntax: \"<angle>\",\r\n    initialValue: \"0deg\",\r\n    toDefaultUnit: (v) => v + \"deg\",\r\n};\r\nconst baseTransformProperties = {\r\n    translate: {\r\n        syntax: \"<length-percentage>\",\r\n        initialValue: \"0px\",\r\n        toDefaultUnit: (v) => v + \"px\",\r\n    },\r\n    rotate: rotation,\r\n    scale: {\r\n        syntax: \"<number>\",\r\n        initialValue: 1,\r\n        toDefaultUnit: noopReturn,\r\n    },\r\n    skew: rotation,\r\n};\r\nconst transformDefinitions = new Map();\r\nconst asTransformCssVar = (name) => `--motion-${name}`;\r\n/**\r\n * Generate a list of every possible transform key\r\n */\r\nconst transforms = [\"x\", \"y\", \"z\"];\r\norder.forEach((name) => {\r\n    axes.forEach((axis) => {\r\n        transforms.push(name + axis);\r\n        transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);\r\n    });\r\n});\r\n/**\r\n * A function to use with Array.sort to sort transform keys by their default order.\r\n */\r\nconst compareTransformOrder = (a, b) => transforms.indexOf(a) - transforms.indexOf(b);\r\n/**\r\n * Provide a quick way to check if a string is the name of a transform\r\n */\r\nconst transformLookup = new Set(transforms);\r\nconst isTransform = (name) => transformLookup.has(name);\r\nconst addTransformToElement = (element, name) => {\r\n    // Map x to translateX etc\r\n    if (transformAlias[name])\r\n        name = transformAlias[name];\r\n    const { transforms } = getAnimationData(element);\r\n    addUniqueItem(transforms, name);\r\n    /**\r\n     * TODO: An optimisation here could be to cache the transform in element data\r\n     * and only update if this has changed.\r\n     */\r\n    element.style.transform = buildTransformTemplate(transforms);\r\n};\r\nconst buildTransformTemplate = (transforms) => transforms\r\n    .sort(compareTransformOrder)\r\n    .reduce(transformListToString, \"\")\r\n    .trim();\r\nconst transformListToString = (template, name) => `${template} ${name}(var(${asTransformCssVar(name)}))`;\r\n\r\nexport { addTransformToElement, asTransformCssVar, axes, buildTransformTemplate, compareTransformOrder, isTransform, transformAlias, transformDefinitions };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}