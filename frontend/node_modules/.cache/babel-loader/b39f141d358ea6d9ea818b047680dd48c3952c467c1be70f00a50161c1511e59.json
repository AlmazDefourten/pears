{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { getOrigin, checkTargetForNewValues } from '../../render/utils/setters.mjs';\nimport { animateVisualElement } from '../../render/utils/animation.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { VisualElement } from '../../render/VisualElement.mjs';\nconst createObject = () => ({});\nclass StateVisualElement extends VisualElement {\n  build() {}\n  measureInstanceViewportBox() {\n    return createBox();\n  }\n  resetTransform() {}\n  restoreTransform() {}\n  removeValueFromRenderState() {}\n  renderInstance() {}\n  scrapeMotionValuesFromProps() {\n    return createObject();\n  }\n  getBaseTargetFromProps() {\n    return undefined;\n  }\n  readValueFromInstance(_state, key, options) {\n    return options.initialState[key] || 0;\n  }\n  sortInstanceNodePosition() {\n    return 0;\n  }\n  makeTargetAnimatableFromInstance(_ref) {\n    let {\n      transition,\n      transitionEnd,\n      ...target\n    } = _ref;\n    const origin = getOrigin(target, transition || {}, this);\n    checkTargetForNewValues(this, target, origin);\n    return {\n      transition,\n      transitionEnd,\n      ...target\n    };\n  }\n}\nconst useVisualState = makeUseVisualState({\n  scrapeMotionValuesFromProps: createObject,\n  createRenderState: createObject\n});\n/**\r\n * This is not an officially supported API and may be removed\r\n * on any version.\r\n */\nfunction useAnimatedState(initialState) {\n  const [animationState, setAnimationState] = useState(initialState);\n  const visualState = useVisualState({}, false);\n  const element = useConstant(() => {\n    return new StateVisualElement({\n      props: {},\n      visualState\n    }, {\n      initialState\n    });\n  });\n  useEffect(() => {\n    element.mount({});\n    return () => element.unmount();\n  }, [element]);\n  useEffect(() => {\n    element.setProps({\n      onUpdate: v => {\n        setAnimationState({\n          ...v\n        });\n      }\n    });\n  }, [setAnimationState, element]);\n  const startAnimation = useConstant(() => animationDefinition => {\n    return animateVisualElement(element, animationDefinition);\n  });\n  return [animationState, startAnimation];\n}\nexport { useAnimatedState };","map":{"version":3,"names":["useState","useEffect","useConstant","getOrigin","checkTargetForNewValues","animateVisualElement","makeUseVisualState","createBox","VisualElement","createObject","StateVisualElement","build","measureInstanceViewportBox","resetTransform","restoreTransform","removeValueFromRenderState","renderInstance","scrapeMotionValuesFromProps","getBaseTargetFromProps","undefined","readValueFromInstance","_state","key","options","initialState","sortInstanceNodePosition","makeTargetAnimatableFromInstance","_ref","transition","transitionEnd","target","origin","useVisualState","createRenderState","useAnimatedState","animationState","setAnimationState","visualState","element","props","mount","unmount","setProps","onUpdate","v","startAnimation","animationDefinition"],"sources":["C:/Users/Кирилл/Desktop/gdfjtgj/pears/frontend/node_modules/framer-motion/dist/es/animation/hooks/use-animated-state.mjs"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useConstant } from '../../utils/use-constant.mjs';\r\nimport { getOrigin, checkTargetForNewValues } from '../../render/utils/setters.mjs';\r\nimport { animateVisualElement } from '../../render/utils/animation.mjs';\r\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\r\nimport { createBox } from '../../projection/geometry/models.mjs';\r\nimport { VisualElement } from '../../render/VisualElement.mjs';\r\n\r\nconst createObject = () => ({});\r\nclass StateVisualElement extends VisualElement {\r\n    build() { }\r\n    measureInstanceViewportBox() {\r\n        return createBox();\r\n    }\r\n    resetTransform() { }\r\n    restoreTransform() { }\r\n    removeValueFromRenderState() { }\r\n    renderInstance() { }\r\n    scrapeMotionValuesFromProps() {\r\n        return createObject();\r\n    }\r\n    getBaseTargetFromProps() {\r\n        return undefined;\r\n    }\r\n    readValueFromInstance(_state, key, options) {\r\n        return options.initialState[key] || 0;\r\n    }\r\n    sortInstanceNodePosition() {\r\n        return 0;\r\n    }\r\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }) {\r\n        const origin = getOrigin(target, transition || {}, this);\r\n        checkTargetForNewValues(this, target, origin);\r\n        return { transition, transitionEnd, ...target };\r\n    }\r\n}\r\nconst useVisualState = makeUseVisualState({\r\n    scrapeMotionValuesFromProps: createObject,\r\n    createRenderState: createObject,\r\n});\r\n/**\r\n * This is not an officially supported API and may be removed\r\n * on any version.\r\n */\r\nfunction useAnimatedState(initialState) {\r\n    const [animationState, setAnimationState] = useState(initialState);\r\n    const visualState = useVisualState({}, false);\r\n    const element = useConstant(() => {\r\n        return new StateVisualElement({ props: {}, visualState }, { initialState });\r\n    });\r\n    useEffect(() => {\r\n        element.mount({});\r\n        return () => element.unmount();\r\n    }, [element]);\r\n    useEffect(() => {\r\n        element.setProps({\r\n            onUpdate: (v) => {\r\n                setAnimationState({ ...v });\r\n            },\r\n        });\r\n    }, [setAnimationState, element]);\r\n    const startAnimation = useConstant(() => (animationDefinition) => {\r\n        return animateVisualElement(element, animationDefinition);\r\n    });\r\n    return [animationState, startAnimation];\r\n}\r\n\r\nexport { useAnimatedState };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}