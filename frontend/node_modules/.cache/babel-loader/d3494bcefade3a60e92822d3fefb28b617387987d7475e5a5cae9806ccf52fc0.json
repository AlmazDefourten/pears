{"ast":null,"code":"import { transformPropOrder } from './transform.mjs';\nconst translateAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\",\n  transformPerspective: \"perspective\"\n};\n/**\r\n * A function to use with Array.sort to sort transform keys by their default order.\r\n */\nconst sortTransformProps = (a, b) => transformPropOrder.indexOf(a) - transformPropOrder.indexOf(b);\n/**\r\n * Build a CSS transform style from individual x/y/scale etc properties.\r\n *\r\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\r\n * providing a transformTemplate function.\r\n */\nfunction buildTransform(_ref, _ref2, transformIsDefault, transformTemplate) {\n  let {\n    transform,\n    transformKeys\n  } = _ref;\n  let {\n    enableHardwareAcceleration = true,\n    allowTransformNone = true\n  } = _ref2;\n  // The transform string we're going to build into.\n  let transformString = \"\";\n  // Transform keys into their default order - this will determine the output order.\n  transformKeys.sort(sortTransformProps);\n  // Loop over each transform and build them into transformString\n  for (const key of transformKeys) {\n    transformString += `${translateAlias[key] || key}(${transform[key]}) `;\n  }\n  if (enableHardwareAcceleration && !transform.z) {\n    transformString += \"translateZ(0)\";\n  }\n  transformString = transformString.trim();\n  // If we have a custom `transform` template, pass our transform values and\n  // generated transformString to that before returning\n  if (transformTemplate) {\n    transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n  } else if (allowTransformNone && transformIsDefault) {\n    transformString = \"none\";\n  }\n  return transformString;\n}\nexport { buildTransform };","map":{"version":3,"names":["transformPropOrder","translateAlias","x","y","z","transformPerspective","sortTransformProps","a","b","indexOf","buildTransform","_ref","_ref2","transformIsDefault","transformTemplate","transform","transformKeys","enableHardwareAcceleration","allowTransformNone","transformString","sort","key","trim"],"sources":["C:/Users/Кирилл/Desktop/gdfjtgj/pears/frontend/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"sourcesContent":["import { transformPropOrder } from './transform.mjs';\r\n\r\nconst translateAlias = {\r\n    x: \"translateX\",\r\n    y: \"translateY\",\r\n    z: \"translateZ\",\r\n    transformPerspective: \"perspective\",\r\n};\r\n/**\r\n * A function to use with Array.sort to sort transform keys by their default order.\r\n */\r\nconst sortTransformProps = (a, b) => transformPropOrder.indexOf(a) - transformPropOrder.indexOf(b);\r\n/**\r\n * Build a CSS transform style from individual x/y/scale etc properties.\r\n *\r\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\r\n * providing a transformTemplate function.\r\n */\r\nfunction buildTransform({ transform, transformKeys, }, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\r\n    // The transform string we're going to build into.\r\n    let transformString = \"\";\r\n    // Transform keys into their default order - this will determine the output order.\r\n    transformKeys.sort(sortTransformProps);\r\n    // Loop over each transform and build them into transformString\r\n    for (const key of transformKeys) {\r\n        transformString += `${translateAlias[key] || key}(${transform[key]}) `;\r\n    }\r\n    if (enableHardwareAcceleration && !transform.z) {\r\n        transformString += \"translateZ(0)\";\r\n    }\r\n    transformString = transformString.trim();\r\n    // If we have a custom `transform` template, pass our transform values and\r\n    // generated transformString to that before returning\r\n    if (transformTemplate) {\r\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\r\n    }\r\n    else if (allowTransformNone && transformIsDefault) {\r\n        transformString = \"none\";\r\n    }\r\n    return transformString;\r\n}\r\n\r\nexport { buildTransform };\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,iBAAiB;AAEpD,MAAMC,cAAc,GAAG;EACnBC,CAAC,EAAE,YAAY;EACfC,CAAC,EAAE,YAAY;EACfC,CAAC,EAAE,YAAY;EACfC,oBAAoB,EAAE;AAC1B,CAAC;AACD;AACA;AACA;AACA,MAAMC,kBAAkB,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAKR,kBAAkB,CAACS,OAAO,CAACF,CAAC,CAAC,GAAGP,kBAAkB,CAACS,OAAO,CAACD,CAAC,CAAC;AAClG;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,cAAcA,CAAAC,IAAA,EAAAC,KAAA,EAAmGC,kBAAkB,EAAEC,iBAAiB,EAAE;EAAA,IAAzI;IAAEC,SAAS;IAAEC;EAAe,CAAC,GAAAL,IAAA;EAAA,IAAE;IAAEM,0BAA0B,GAAG,IAAI;IAAEC,kBAAkB,GAAG;EAAM,CAAC,GAAAN,KAAA;EACpH;EACA,IAAIO,eAAe,GAAG,EAAE;EACxB;EACAH,aAAa,CAACI,IAAI,CAACd,kBAAkB,CAAC;EACtC;EACA,KAAK,MAAMe,GAAG,IAAIL,aAAa,EAAE;IAC7BG,eAAe,IAAK,GAAElB,cAAc,CAACoB,GAAG,CAAC,IAAIA,GAAI,IAAGN,SAAS,CAACM,GAAG,CAAE,IAAG;EAC1E;EACA,IAAIJ,0BAA0B,IAAI,CAACF,SAAS,CAACX,CAAC,EAAE;IAC5Ce,eAAe,IAAI,eAAe;EACtC;EACAA,eAAe,GAAGA,eAAe,CAACG,IAAI,EAAE;EACxC;EACA;EACA,IAAIR,iBAAiB,EAAE;IACnBK,eAAe,GAAGL,iBAAiB,CAACC,SAAS,EAAEF,kBAAkB,GAAG,EAAE,GAAGM,eAAe,CAAC;EAC7F,CAAC,MACI,IAAID,kBAAkB,IAAIL,kBAAkB,EAAE;IAC/CM,eAAe,GAAG,MAAM;EAC5B;EACA,OAAOA,eAAe;AAC1B;AAEA,SAAST,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}