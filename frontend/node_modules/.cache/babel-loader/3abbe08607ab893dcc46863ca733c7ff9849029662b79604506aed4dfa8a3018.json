{"ast":null,"code":"import { __rest } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { noop } from '@motionone/utils';\nimport { animateStyle } from '../animate/animate-style.es.js';\nimport { style } from '../animate/style.es.js';\nimport { getOptions } from '../animate/utils/options.es.js';\nimport { hasChanged } from './utils/has-changed.es.js';\nimport { resolveVariant } from './utils/resolve-variant.es.js';\nimport { scheduleAnimation, unscheduleAnimation } from './utils/schedule.es.js';\nimport { inView } from './gestures/in-view.es.js';\nimport { hover } from './gestures/hover.es.js';\nimport { press } from './gestures/press.es.js';\nimport { motionEvent } from './utils/events.es.js';\nimport { Animation } from '@motionone/animation';\nconst gestures = {\n  inView,\n  hover,\n  press\n};\n/**\r\n * A list of state types, in priority order. If a value is defined in\r\n * a righter-most type, it will override any definition in a lefter-most.\r\n */\nconst stateTypes = [\"initial\", \"animate\", ...Object.keys(gestures), \"exit\"];\n/**\r\n * A global store of all generated motion states. This can be used to lookup\r\n * a motion state for a given Element.\r\n */\nconst mountedStates = new WeakMap();\nfunction createMotionState() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let parent = arguments.length > 1 ? arguments[1] : undefined;\n  /**\r\n   * The element represented by the motion state. This is an empty reference\r\n   * when we create the state to support SSR and allow for later mounting\r\n   * in view libraries.\r\n   *\r\n   * @ts-ignore\r\n   */\n  let element;\n  /**\r\n   * Calculate a depth that we can use to order motion states by tree depth.\r\n   */\n  let depth = parent ? parent.getDepth() + 1 : 0;\n  /**\r\n   * Track which states are currently active.\r\n   */\n  const activeStates = {\n    initial: true,\n    animate: true\n  };\n  /**\r\n   * A map of functions that, when called, will remove event listeners for\r\n   * a given gesture.\r\n   */\n  const gestureSubscriptions = {};\n  /**\r\n   * Initialise a context to share through motion states. This\r\n   * will be populated by variant names (if any).\r\n   */\n  const context = {};\n  for (const name of stateTypes) {\n    context[name] = typeof options[name] === \"string\" ? options[name] : parent === null || parent === void 0 ? void 0 : parent.getContext()[name];\n  }\n  /**\r\n   * If initial is set to false we use the animate prop as the initial\r\n   * animation state.\r\n   */\n  const initialVariantSource = options.initial === false ? \"animate\" : \"initial\";\n  /**\r\n   * Destructure an initial target out from the resolved initial variant.\r\n   */\n  let _a = resolveVariant(options[initialVariantSource] || context[initialVariantSource], options.variants) || {},\n    target = __rest(_a, [\"transition\"]);\n  /**\r\n   * The base target is a cached map of values that we'll use to animate\r\n   * back to if a value is removed from all active state types. This\r\n   * is usually the initial value as read from the DOM, for instance if\r\n   * it hasn't been defined in initial.\r\n   */\n  const baseTarget = Object.assign({}, target);\n  /**\r\n   * A generator that will be processed by the global animation scheduler.\r\n   * This yeilds when it switches from reading the DOM to writing to it\r\n   * to prevent layout thrashing.\r\n   */\n  function* animateUpdates() {\n    var _a, _b;\n    const prevTarget = target;\n    target = {};\n    const animationOptions = {};\n    for (const name of stateTypes) {\n      if (!activeStates[name]) continue;\n      const variant = resolveVariant(options[name]);\n      if (!variant) continue;\n      for (const key in variant) {\n        if (key === \"transition\") continue;\n        target[key] = variant[key];\n        animationOptions[key] = getOptions((_b = (_a = variant.transition) !== null && _a !== void 0 ? _a : options.transition) !== null && _b !== void 0 ? _b : {}, key);\n      }\n    }\n    const allTargetKeys = new Set([...Object.keys(target), ...Object.keys(prevTarget)]);\n    const animationFactories = [];\n    allTargetKeys.forEach(key => {\n      var _a;\n      if (target[key] === undefined) {\n        target[key] = baseTarget[key];\n      }\n      if (hasChanged(prevTarget[key], target[key])) {\n        (_a = baseTarget[key]) !== null && _a !== void 0 ? _a : baseTarget[key] = style.get(element, key);\n        animationFactories.push(animateStyle(element, key, target[key], animationOptions[key], Animation));\n      }\n    });\n    // Wait for all animation states to read from the DOM\n    yield;\n    const animations = animationFactories.map(factory => factory()).filter(Boolean);\n    if (!animations.length) return;\n    const animationTarget = target;\n    element.dispatchEvent(motionEvent(\"motionstart\", animationTarget));\n    Promise.all(animations.map(animation => animation.finished)).then(() => {\n      element.dispatchEvent(motionEvent(\"motioncomplete\", animationTarget));\n    }).catch(noop);\n  }\n  const setGesture = (name, isActive) => () => {\n    activeStates[name] = isActive;\n    scheduleAnimation(state);\n  };\n  const updateGestureSubscriptions = () => {\n    for (const name in gestures) {\n      const isGestureActive = gestures[name].isActive(options);\n      const remove = gestureSubscriptions[name];\n      if (isGestureActive && !remove) {\n        gestureSubscriptions[name] = gestures[name].subscribe(element, {\n          enable: setGesture(name, true),\n          disable: setGesture(name, false)\n        }, options);\n      } else if (!isGestureActive && remove) {\n        remove();\n        delete gestureSubscriptions[name];\n      }\n    }\n  };\n  const state = {\n    update: newOptions => {\n      if (!element) return;\n      options = newOptions;\n      updateGestureSubscriptions();\n      scheduleAnimation(state);\n    },\n    setActive: (name, isActive) => {\n      if (!element) return;\n      activeStates[name] = isActive;\n      scheduleAnimation(state);\n    },\n    animateUpdates,\n    getDepth: () => depth,\n    getTarget: () => target,\n    getOptions: () => options,\n    getContext: () => context,\n    mount: newElement => {\n      invariant(Boolean(newElement), \"Animation state must be mounted with valid Element\");\n      element = newElement;\n      mountedStates.set(element, state);\n      updateGestureSubscriptions();\n      return () => {\n        mountedStates.delete(element);\n        unscheduleAnimation(state);\n        for (const key in gestureSubscriptions) {\n          gestureSubscriptions[key]();\n        }\n      };\n    },\n    isMounted: () => Boolean(element)\n  };\n  return state;\n}\nexport { createMotionState, mountedStates };","map":{"version":3,"names":["__rest","invariant","noop","animateStyle","style","getOptions","hasChanged","resolveVariant","scheduleAnimation","unscheduleAnimation","inView","hover","press","motionEvent","Animation","gestures","stateTypes","Object","keys","mountedStates","WeakMap","createMotionState","options","arguments","length","undefined","parent","element","depth","getDepth","activeStates","initial","animate","gestureSubscriptions","context","name","getContext","initialVariantSource","_a","variants","target","baseTarget","assign","animateUpdates","_b","prevTarget","animationOptions","variant","key","transition","allTargetKeys","Set","animationFactories","forEach","get","push","animations","map","factory","filter","Boolean","animationTarget","dispatchEvent","Promise","all","animation","finished","then","catch","setGesture","isActive","state","updateGestureSubscriptions","isGestureActive","remove","subscribe","enable","disable","update","newOptions","setActive","getTarget","mount","newElement","set","delete","isMounted"],"sources":["C:/Users/Кирилл/Desktop/gdfjtgj/pears/frontend/node_modules/@motionone/dom/dist/state/index.es.js"],"sourcesContent":["import { __rest } from 'tslib';\r\nimport { invariant } from 'hey-listen';\r\nimport { noop } from '@motionone/utils';\r\nimport { animateStyle } from '../animate/animate-style.es.js';\r\nimport { style } from '../animate/style.es.js';\r\nimport { getOptions } from '../animate/utils/options.es.js';\r\nimport { hasChanged } from './utils/has-changed.es.js';\r\nimport { resolveVariant } from './utils/resolve-variant.es.js';\r\nimport { scheduleAnimation, unscheduleAnimation } from './utils/schedule.es.js';\r\nimport { inView } from './gestures/in-view.es.js';\r\nimport { hover } from './gestures/hover.es.js';\r\nimport { press } from './gestures/press.es.js';\r\nimport { motionEvent } from './utils/events.es.js';\r\nimport { Animation } from '@motionone/animation';\r\n\r\nconst gestures = { inView, hover, press };\r\n/**\r\n * A list of state types, in priority order. If a value is defined in\r\n * a righter-most type, it will override any definition in a lefter-most.\r\n */\r\nconst stateTypes = [\"initial\", \"animate\", ...Object.keys(gestures), \"exit\"];\r\n/**\r\n * A global store of all generated motion states. This can be used to lookup\r\n * a motion state for a given Element.\r\n */\r\nconst mountedStates = new WeakMap();\r\nfunction createMotionState(options = {}, parent) {\r\n    /**\r\n     * The element represented by the motion state. This is an empty reference\r\n     * when we create the state to support SSR and allow for later mounting\r\n     * in view libraries.\r\n     *\r\n     * @ts-ignore\r\n     */\r\n    let element;\r\n    /**\r\n     * Calculate a depth that we can use to order motion states by tree depth.\r\n     */\r\n    let depth = parent ? parent.getDepth() + 1 : 0;\r\n    /**\r\n     * Track which states are currently active.\r\n     */\r\n    const activeStates = { initial: true, animate: true };\r\n    /**\r\n     * A map of functions that, when called, will remove event listeners for\r\n     * a given gesture.\r\n     */\r\n    const gestureSubscriptions = {};\r\n    /**\r\n     * Initialise a context to share through motion states. This\r\n     * will be populated by variant names (if any).\r\n     */\r\n    const context = {};\r\n    for (const name of stateTypes) {\r\n        context[name] =\r\n            typeof options[name] === \"string\"\r\n                ? options[name]\r\n                : parent === null || parent === void 0 ? void 0 : parent.getContext()[name];\r\n    }\r\n    /**\r\n     * If initial is set to false we use the animate prop as the initial\r\n     * animation state.\r\n     */\r\n    const initialVariantSource = options.initial === false ? \"animate\" : \"initial\";\r\n    /**\r\n     * Destructure an initial target out from the resolved initial variant.\r\n     */\r\n    let _a = resolveVariant(options[initialVariantSource] || context[initialVariantSource], options.variants) || {}, target = __rest(_a, [\"transition\"]);\r\n    /**\r\n     * The base target is a cached map of values that we'll use to animate\r\n     * back to if a value is removed from all active state types. This\r\n     * is usually the initial value as read from the DOM, for instance if\r\n     * it hasn't been defined in initial.\r\n     */\r\n    const baseTarget = Object.assign({}, target);\r\n    /**\r\n     * A generator that will be processed by the global animation scheduler.\r\n     * This yeilds when it switches from reading the DOM to writing to it\r\n     * to prevent layout thrashing.\r\n     */\r\n    function* animateUpdates() {\r\n        var _a, _b;\r\n        const prevTarget = target;\r\n        target = {};\r\n        const animationOptions = {};\r\n        for (const name of stateTypes) {\r\n            if (!activeStates[name])\r\n                continue;\r\n            const variant = resolveVariant(options[name]);\r\n            if (!variant)\r\n                continue;\r\n            for (const key in variant) {\r\n                if (key === \"transition\")\r\n                    continue;\r\n                target[key] = variant[key];\r\n                animationOptions[key] = getOptions((_b = (_a = variant.transition) !== null && _a !== void 0 ? _a : options.transition) !== null && _b !== void 0 ? _b : {}, key);\r\n            }\r\n        }\r\n        const allTargetKeys = new Set([\r\n            ...Object.keys(target),\r\n            ...Object.keys(prevTarget),\r\n        ]);\r\n        const animationFactories = [];\r\n        allTargetKeys.forEach((key) => {\r\n            var _a;\r\n            if (target[key] === undefined) {\r\n                target[key] = baseTarget[key];\r\n            }\r\n            if (hasChanged(prevTarget[key], target[key])) {\r\n                (_a = baseTarget[key]) !== null && _a !== void 0 ? _a : (baseTarget[key] = style.get(element, key));\r\n                animationFactories.push(animateStyle(element, key, target[key], animationOptions[key], Animation));\r\n            }\r\n        });\r\n        // Wait for all animation states to read from the DOM\r\n        yield;\r\n        const animations = animationFactories\r\n            .map((factory) => factory())\r\n            .filter(Boolean);\r\n        if (!animations.length)\r\n            return;\r\n        const animationTarget = target;\r\n        element.dispatchEvent(motionEvent(\"motionstart\", animationTarget));\r\n        Promise.all(animations.map((animation) => animation.finished))\r\n            .then(() => {\r\n            element.dispatchEvent(motionEvent(\"motioncomplete\", animationTarget));\r\n        })\r\n            .catch(noop);\r\n    }\r\n    const setGesture = (name, isActive) => () => {\r\n        activeStates[name] = isActive;\r\n        scheduleAnimation(state);\r\n    };\r\n    const updateGestureSubscriptions = () => {\r\n        for (const name in gestures) {\r\n            const isGestureActive = gestures[name].isActive(options);\r\n            const remove = gestureSubscriptions[name];\r\n            if (isGestureActive && !remove) {\r\n                gestureSubscriptions[name] = gestures[name].subscribe(element, {\r\n                    enable: setGesture(name, true),\r\n                    disable: setGesture(name, false),\r\n                }, options);\r\n            }\r\n            else if (!isGestureActive && remove) {\r\n                remove();\r\n                delete gestureSubscriptions[name];\r\n            }\r\n        }\r\n    };\r\n    const state = {\r\n        update: (newOptions) => {\r\n            if (!element)\r\n                return;\r\n            options = newOptions;\r\n            updateGestureSubscriptions();\r\n            scheduleAnimation(state);\r\n        },\r\n        setActive: (name, isActive) => {\r\n            if (!element)\r\n                return;\r\n            activeStates[name] = isActive;\r\n            scheduleAnimation(state);\r\n        },\r\n        animateUpdates,\r\n        getDepth: () => depth,\r\n        getTarget: () => target,\r\n        getOptions: () => options,\r\n        getContext: () => context,\r\n        mount: (newElement) => {\r\n            invariant(Boolean(newElement), \"Animation state must be mounted with valid Element\");\r\n            element = newElement;\r\n            mountedStates.set(element, state);\r\n            updateGestureSubscriptions();\r\n            return () => {\r\n                mountedStates.delete(element);\r\n                unscheduleAnimation(state);\r\n                for (const key in gestureSubscriptions) {\r\n                    gestureSubscriptions[key]();\r\n                }\r\n            };\r\n        },\r\n        isMounted: () => Boolean(element),\r\n    };\r\n    return state;\r\n}\r\n\r\nexport { createMotionState, mountedStates };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}