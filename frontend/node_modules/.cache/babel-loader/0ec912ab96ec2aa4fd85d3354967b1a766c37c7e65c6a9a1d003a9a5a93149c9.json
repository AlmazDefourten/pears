{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041A\\u0438\\u0440\\u0438\\u043B\\u043B\\\\Desktop\\\\here\\\\pears\\\\frontend\\\\src\\\\components\\\\swipes\\\\card.tsx\",\n  _s = $RefreshSig$();\nimport { motion, useAnimationControls } from 'framer-motion';\nimport css from \"./swipes.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = _ref => {\n  _s();\n  let {\n    name,\n    setCharacters\n  } = _ref;\n  //animations hook\n  //хук анимаций\n  const controls = useAnimationControls();\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    className: css.swipe\n    // animate - values to animate to\n    // animate - значения, к которым привести\n    ,\n    animate: controls\n    //drag only works in the x-axis\n    //drag идет только по оси x\n    ,\n    drag: \"x\"\n    //nothing works without event, so do not remove\n    //без event ничего не работает, не убирать\n    //offset contains x and y values for the distance moved from the first pan event\n    //offset - изменения в пикселях от позиции до начала drag\n    ,\n    onDragEnd: async (event, info) => {\n      const x = info.offset.x;\n      switch (true) {\n        case x > 200:\n          //controls.start() return a promise\n          //controls.start() возвращает promise, см документацию\n          await controls.start({\n            x: window.screen.width\n          });\n          setCharacters(prevState => prevState.filter(char => char.name !== name));\n          console.log(\"Swiped right\");\n          break;\n        case x < -200:\n          await controls.start({\n            x: -window.screen.width\n          });\n          setCharacters(prevState => prevState.filter(char => char.name !== name));\n          console.log(\"Swiped left\");\n          break;\n      }\n      // if (info.offset.x > 200) {\n      // await controls.start({x: window.screen.width})\n      // setCharacters(prevState => prevState.filter(char => char.name !== name))\n      // console.log(\"Swiped right\")\n      // }\n      // if (info.offset.x < -200) {\n      // await controls.start({x: -window.screen.width})\n      // setCharacters(prevState => prevState.filter(char => char.name !== name))\n      // console.log(\"Swiped left\")\n      // }\n    }\n    //does what it says\n    //возвращает на место при отпускании\n    ,\n    dragSnapToOrigin: true\n    //does what it says\n    //ограничения в пикселях на drag от оригинального положения(самого первого, типа init), не позволит выйти за эти значения\n    ,\n    dragConstraints: {\n      left: -300,\n      right: 300\n    }\n    //does not allows an object to slide after dropping\\releasing it\n    //не позволяет карточке скользить после отпускания\n    ,\n    dragMomentum: true,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.card,\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n_s(Card, \"TdBlAv3Em/J1b+sEMsDh85RyRD4=\", false, function () {\n  return [useAnimationControls];\n});\n_c = Card;\nexport default Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["motion","useAnimationControls","css","jsxDEV","_jsxDEV","Card","_ref","_s","name","setCharacters","controls","div","className","swipe","animate","drag","onDragEnd","event","info","x","offset","start","window","screen","width","prevState","filter","char","console","log","dragSnapToOrigin","dragConstraints","left","right","dragMomentum","children","card","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Кирилл/Desktop/here/pears/frontend/src/components/swipes/card.tsx"],"sourcesContent":["import { motion, PanInfo, useAnimationControls } from 'framer-motion';\r\nimport css from \"./swipes.module.css\";\r\ninterface IProps{\r\n    name: string, \r\n    setCharacters: React.Dispatch<React.SetStateAction<{name: string;}[]>>,\r\n}\r\n\r\nconst Card = ({name, setCharacters}: IProps) =>{\r\n\r\n    //animations hook\r\n    //хук анимаций\r\n    const controls = useAnimationControls();\r\n\r\n    return(\r\n        <motion.div\r\n        className={css.swipe}\r\n        // animate - values to animate to\r\n        // animate - значения, к которым привести\r\n        animate={controls}\r\n        //drag only works in the x-axis\r\n        //drag идет только по оси x\r\n        drag='x'\r\n        //nothing works without event, so do not remove\r\n        //без event ничего не работает, не убирать\r\n        //offset contains x and y values for the distance moved from the first pan event\r\n        //offset - изменения в пикселях от позиции до начала drag\r\n        onDragEnd={async (event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {\r\n            const x:number = info.offset.x;\r\n            switch(true){\r\n                case(x > 200):\r\n                    //controls.start() return a promise\r\n                    //controls.start() возвращает promise, см документацию\r\n                    await controls.start({x: window.screen.width});\r\n                    setCharacters(prevState => prevState.filter(char => char.name !== name));\r\n                    console.log(\"Swiped right\");\r\n                    break;\r\n                case(x < -200):\r\n                    await controls.start({x: -window.screen.width});\r\n                    setCharacters(prevState => prevState.filter(char => char.name !== name));\r\n                    console.log(\"Swiped left\");\r\n                    break;\r\n            }\r\n            // if (info.offset.x > 200) {\r\n            // await controls.start({x: window.screen.width})\r\n            // setCharacters(prevState => prevState.filter(char => char.name !== name))\r\n            // console.log(\"Swiped right\")\r\n            // }\r\n            // if (info.offset.x < -200) {\r\n            // await controls.start({x: -window.screen.width})\r\n            // setCharacters(prevState => prevState.filter(char => char.name !== name))\r\n            // console.log(\"Swiped left\")\r\n            // }\r\n        }}\r\n        //does what it says\r\n        //возвращает на место при отпускании\r\n        dragSnapToOrigin\r\n        //does what it says\r\n        //ограничения в пикселях на drag от оригинального положения(самого первого, типа init), не позволит выйти за эти значения\r\n        dragConstraints={{ left: -300, right: 300 }}\r\n        //does not allows an object to slide after dropping\\releasing it\r\n        //не позволяет карточке скользить после отпускания\r\n        dragMomentum={true}>\r\n            <div className={css.card}>{name}</div>\r\n        </motion.div>\r\n    )\r\n} \r\n\r\nexport default Card;"],"mappings":";;AAAA,SAASA,MAAM,EAAWC,oBAAoB,QAAQ,eAAe;AACrE,OAAOC,GAAG,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMtC,MAAMC,IAAI,GAAGC,IAAA,IAAkC;EAAAC,EAAA;EAAA,IAAjC;IAACC,IAAI;IAAEC;EAAqB,CAAC,GAAAH,IAAA;EAEvC;EACA;EACA,MAAMI,QAAQ,GAAGT,oBAAoB,EAAE;EAEvC,oBACIG,OAAA,CAACJ,MAAM,CAACW,GAAG;IACXC,SAAS,EAAEV,GAAG,CAACW;IACf;IACA;IAAA;IACAC,OAAO,EAAEJ;IACT;IACA;IAAA;IACAK,IAAI,EAAC;IACL;IACA;IACA;IACA;IAAA;IACAC,SAAS,EAAE,MAAAA,CAAOC,KAA6C,EAAEC,IAAa,KAAK;MAC/E,MAAMC,CAAQ,GAAGD,IAAI,CAACE,MAAM,CAACD,CAAC;MAC9B,QAAO,IAAI;QACP,KAAKA,CAAC,GAAG,GAAG;UACR;UACA;UACA,MAAMT,QAAQ,CAACW,KAAK,CAAC;YAACF,CAAC,EAAEG,MAAM,CAACC,MAAM,CAACC;UAAK,CAAC,CAAC;UAC9Cf,aAAa,CAACgB,SAAS,IAAIA,SAAS,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACnB,IAAI,KAAKA,IAAI,CAAC,CAAC;UACxEoB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;UAC3B;QACJ,KAAKV,CAAC,GAAG,CAAC,GAAG;UACT,MAAMT,QAAQ,CAACW,KAAK,CAAC;YAACF,CAAC,EAAE,CAACG,MAAM,CAACC,MAAM,CAACC;UAAK,CAAC,CAAC;UAC/Cf,aAAa,CAACgB,SAAS,IAAIA,SAAS,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACnB,IAAI,KAAKA,IAAI,CAAC,CAAC;UACxEoB,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;UAC1B;MAAM;MAEd;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ;IACA;IACA;IAAA;IACAC,gBAAgB;IAChB;IACA;IAAA;IACAC,eAAe,EAAE;MAAEC,IAAI,EAAE,CAAC,GAAG;MAAEC,KAAK,EAAE;IAAI;IAC1C;IACA;IAAA;IACAC,YAAY,EAAE,IAAK;IAAAC,QAAA,eACf/B,OAAA;MAAKQ,SAAS,EAAEV,GAAG,CAACkC,IAAK;MAAAD,QAAA,EAAE3B;IAAI;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAO;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC7B;AAErB,CAAC;AAAAjC,EAAA,CA1DKF,IAAI;EAAA,QAIWJ,oBAAoB;AAAA;AAAAwC,EAAA,GAJnCpC,IAAI;AA4DV,eAAeA,IAAI;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}