{"ast":null,"code":"import { sync } from '../../frameloop/index.mjs';\nimport { animate } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\n\n/**\r\n * A list of values that can be hardware-accelerated.\r\n */\nconst acceleratedValues = new Set([\"opacity\"]);\n/**\r\n * 10ms is chosen here as it strikes a balance between smooth\r\n * results (more than one keyframe per frame at 60fps) and\r\n * keyframe quantity.\r\n */\nconst sampleDelta = 10; //ms\nfunction createAcceleratedAnimation(value, valueName, _ref) {\n  let {\n    onUpdate,\n    onComplete,\n    ...options\n  } = _ref;\n  const canAccelerateAnimation = supports.waapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== \"mirror\" && options.damping !== 0;\n  if (!canAccelerateAnimation) return false;\n  let {\n    keyframes,\n    duration = 300,\n    elapsed = 0,\n    ease\n  } = options;\n  /**\r\n   * If this animation needs pre-generated keyframes then generate.\r\n   */\n  if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\n    /**\r\n     * If we need to pre-generate keyframes and repeat is infinite then\r\n     * early return as this will lock the thread.\r\n     */\n    if (options.repeat === Infinity) return;\n    const sampleAnimation = animate({\n      ...options,\n      elapsed: 0\n    });\n    let state = {\n      done: false,\n      value: keyframes[0]\n    };\n    const pregeneratedKeyframes = [];\n    /**\r\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\r\n     * we're heading for an infinite loop.\r\n     */\n    let t = 0;\n    while (!state.done && t < 20000) {\n      state = sampleAnimation.sample(t);\n      pregeneratedKeyframes.push(state.value);\n      t += sampleDelta;\n    }\n    keyframes = pregeneratedKeyframes;\n    duration = t - sampleDelta;\n    ease = \"linear\";\n  }\n  const animation = animateStyle(value.owner.current, valueName, keyframes, {\n    ...options,\n    delay: -elapsed,\n    duration,\n    /**\r\n     * This function is currently not called if ease is provided\r\n     * as a function so the cast is safe.\r\n     *\r\n     * However it would be possible for a future refinement to port\r\n     * in easing pregeneration from Motion One for browsers that\r\n     * support the upcoming `linear()` easing function.\r\n     */\n    ease: ease\n  });\n  /**\r\n   * Prefer the `onfinish` prop as it's more widely supported than\r\n   * the `finished` promise.\r\n   *\r\n   * Here, we synchronously set the provided MotionValue to the end\r\n   * keyframe. If we didn't, when the WAAPI animation is finished it would\r\n   * be removed from the element which would then revert to its old styles.\r\n   */\n  animation.onfinish = () => {\n    value.set(getFinalKeyframe(keyframes, options));\n    sync.update(() => animation.cancel());\n    onComplete && onComplete();\n  };\n  /**\r\n   * Animation interrupt callback.\r\n   */\n  return {\n    get currentTime() {\n      return animation.currentTime || 0;\n    },\n    set currentTime(t) {\n      animation.currentTime = t;\n    },\n    stop: () => {\n      /**\r\n       * WAAPI doesn't natively have any interruption capabilities.\r\n       *\r\n       * Rather than read commited styles back out of the DOM, we can\r\n       * create a renderless JS animation and sample it twice to calculate\r\n       * its current value, \"previous\" value, and therefore allow\r\n       * Motion to calculate velocity for any subsequent animation.\r\n       */\n      const {\n        currentTime\n      } = animation;\n      if (currentTime) {\n        const sampleAnimation = animate({\n          ...options,\n          autoplay: false\n        });\n        value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n      }\n      sync.update(() => animation.cancel());\n    }\n  };\n}\nexport { createAcceleratedAnimation };","map":{"version":3,"names":["sync","animate","animateStyle","isWaapiSupportedEasing","supports","getFinalKeyframe","acceleratedValues","Set","sampleDelta","createAcceleratedAnimation","value","valueName","_ref","onUpdate","onComplete","options","canAccelerateAnimation","waapi","has","repeatDelay","repeatType","damping","keyframes","duration","elapsed","ease","type","repeat","Infinity","sampleAnimation","state","done","pregeneratedKeyframes","t","sample","push","animation","owner","current","delay","onfinish","set","update","cancel","currentTime","stop","autoplay","setWithVelocity"],"sources":["C:/Users/Кирилл/Desktop/gdfjtgj/pears/frontend/node_modules/framer-motion/dist/es/animation/waapi/create-accelerated-animation.mjs"],"sourcesContent":["import { sync } from '../../frameloop/index.mjs';\r\nimport { animate } from '../legacy-popmotion/index.mjs';\r\nimport { animateStyle } from './index.mjs';\r\nimport { isWaapiSupportedEasing } from './easing.mjs';\r\nimport { supports } from './supports.mjs';\r\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\r\n\r\n/**\r\n * A list of values that can be hardware-accelerated.\r\n */\r\nconst acceleratedValues = new Set([\"opacity\"]);\r\n/**\r\n * 10ms is chosen here as it strikes a balance between smooth\r\n * results (more than one keyframe per frame at 60fps) and\r\n * keyframe quantity.\r\n */\r\nconst sampleDelta = 10; //ms\r\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\r\n    const canAccelerateAnimation = supports.waapi() &&\r\n        acceleratedValues.has(valueName) &&\r\n        !options.repeatDelay &&\r\n        options.repeatType !== \"mirror\" &&\r\n        options.damping !== 0;\r\n    if (!canAccelerateAnimation)\r\n        return false;\r\n    let { keyframes, duration = 300, elapsed = 0, ease } = options;\r\n    /**\r\n     * If this animation needs pre-generated keyframes then generate.\r\n     */\r\n    if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\r\n        /**\r\n         * If we need to pre-generate keyframes and repeat is infinite then\r\n         * early return as this will lock the thread.\r\n         */\r\n        if (options.repeat === Infinity)\r\n            return;\r\n        const sampleAnimation = animate({ ...options, elapsed: 0 });\r\n        let state = { done: false, value: keyframes[0] };\r\n        const pregeneratedKeyframes = [];\r\n        /**\r\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\r\n         * we're heading for an infinite loop.\r\n         */\r\n        let t = 0;\r\n        while (!state.done && t < 20000) {\r\n            state = sampleAnimation.sample(t);\r\n            pregeneratedKeyframes.push(state.value);\r\n            t += sampleDelta;\r\n        }\r\n        keyframes = pregeneratedKeyframes;\r\n        duration = t - sampleDelta;\r\n        ease = \"linear\";\r\n    }\r\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\r\n        ...options,\r\n        delay: -elapsed,\r\n        duration,\r\n        /**\r\n         * This function is currently not called if ease is provided\r\n         * as a function so the cast is safe.\r\n         *\r\n         * However it would be possible for a future refinement to port\r\n         * in easing pregeneration from Motion One for browsers that\r\n         * support the upcoming `linear()` easing function.\r\n         */\r\n        ease: ease,\r\n    });\r\n    /**\r\n     * Prefer the `onfinish` prop as it's more widely supported than\r\n     * the `finished` promise.\r\n     *\r\n     * Here, we synchronously set the provided MotionValue to the end\r\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\r\n     * be removed from the element which would then revert to its old styles.\r\n     */\r\n    animation.onfinish = () => {\r\n        value.set(getFinalKeyframe(keyframes, options));\r\n        sync.update(() => animation.cancel());\r\n        onComplete && onComplete();\r\n    };\r\n    /**\r\n     * Animation interrupt callback.\r\n     */\r\n    return {\r\n        get currentTime() {\r\n            return animation.currentTime || 0;\r\n        },\r\n        set currentTime(t) {\r\n            animation.currentTime = t;\r\n        },\r\n        stop: () => {\r\n            /**\r\n             * WAAPI doesn't natively have any interruption capabilities.\r\n             *\r\n             * Rather than read commited styles back out of the DOM, we can\r\n             * create a renderless JS animation and sample it twice to calculate\r\n             * its current value, \"previous\" value, and therefore allow\r\n             * Motion to calculate velocity for any subsequent animation.\r\n             */\r\n            const { currentTime } = animation;\r\n            if (currentTime) {\r\n                const sampleAnimation = animate({ ...options, autoplay: false });\r\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\r\n            }\r\n            sync.update(() => animation.cancel());\r\n        },\r\n    };\r\n}\r\n\r\nexport { createAcceleratedAnimation };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}