{"ast":null,"code":"import { useEffect, useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { usePresence } from '../../components/AnimatePresence/use-presence.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { createAnimationState } from '../../render/utils/animation-state.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.mjs';\nconst animations = {\n  animation: makeRenderlessComponent(_ref => {\n    let {\n      visualElement,\n      animate\n    } = _ref;\n    /**\r\n     * We dynamically generate the AnimationState manager as it contains a reference\r\n     * to the underlying animation library. We only want to load that if we load this,\r\n     * so people can optionally code split it out using the `m` component.\r\n     */\n    visualElement.animationState || (visualElement.animationState = createAnimationState(visualElement));\n    /**\r\n     * Subscribe any provided AnimationControls to the component's VisualElement\r\n     */\n    if (isAnimationControls(animate)) {\n      useEffect(() => animate.subscribe(visualElement), [animate]);\n    }\n  }),\n  exit: makeRenderlessComponent(props => {\n    const {\n      custom,\n      visualElement\n    } = props;\n    const [isPresent, safeToRemove] = usePresence();\n    const presenceContext = useContext(PresenceContext);\n    useEffect(() => {\n      visualElement.isPresent = isPresent;\n      const animation = visualElement.animationState && visualElement.animationState.setActive(AnimationType.Exit, !isPresent, {\n        custom: presenceContext && presenceContext.custom || custom\n      });\n      if (animation && !isPresent) {\n        animation.then(safeToRemove);\n      }\n    }, [isPresent]);\n  })\n};\nexport { animations };","map":{"version":3,"names":["useEffect","useContext","isAnimationControls","usePresence","PresenceContext","createAnimationState","AnimationType","makeRenderlessComponent","animations","animation","_ref","visualElement","animate","animationState","subscribe","exit","props","custom","isPresent","safeToRemove","presenceContext","setActive","Exit","then"],"sources":["C:/Users/Кирилл/Desktop/here/pears/frontend/node_modules/framer-motion/dist/es/motion/features/animations.mjs"],"sourcesContent":["import { useEffect, useContext } from 'react';\r\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\r\nimport { usePresence } from '../../components/AnimatePresence/use-presence.mjs';\r\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\r\nimport { createAnimationState } from '../../render/utils/animation-state.mjs';\r\nimport { AnimationType } from '../../render/utils/types.mjs';\r\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.mjs';\r\n\r\nconst animations = {\r\n    animation: makeRenderlessComponent(({ visualElement, animate }) => {\r\n        /**\r\n         * We dynamically generate the AnimationState manager as it contains a reference\r\n         * to the underlying animation library. We only want to load that if we load this,\r\n         * so people can optionally code split it out using the `m` component.\r\n         */\r\n        visualElement.animationState || (visualElement.animationState = createAnimationState(visualElement));\r\n        /**\r\n         * Subscribe any provided AnimationControls to the component's VisualElement\r\n         */\r\n        if (isAnimationControls(animate)) {\r\n            useEffect(() => animate.subscribe(visualElement), [animate]);\r\n        }\r\n    }),\r\n    exit: makeRenderlessComponent((props) => {\r\n        const { custom, visualElement } = props;\r\n        const [isPresent, safeToRemove] = usePresence();\r\n        const presenceContext = useContext(PresenceContext);\r\n        useEffect(() => {\r\n            visualElement.isPresent = isPresent;\r\n            const animation = visualElement.animationState &&\r\n                visualElement.animationState.setActive(AnimationType.Exit, !isPresent, {\r\n                    custom: (presenceContext && presenceContext.custom) ||\r\n                        custom,\r\n                });\r\n            if (animation && !isPresent) {\r\n                animation.then(safeToRemove);\r\n            }\r\n        }, [isPresent]);\r\n    }),\r\n};\r\n\r\nexport { animations };\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7C,SAASC,mBAAmB,QAAQ,iDAAiD;AACrF,SAASC,WAAW,QAAQ,mDAAmD;AAC/E,SAASC,eAAe,QAAQ,mCAAmC;AACnE,SAASC,oBAAoB,QAAQ,wCAAwC;AAC7E,SAASC,aAAa,QAAQ,8BAA8B;AAC5D,SAASC,uBAAuB,QAAQ,wCAAwC;AAEhF,MAAMC,UAAU,GAAG;EACfC,SAAS,EAAEF,uBAAuB,CAACG,IAAA,IAAgC;IAAA,IAA/B;MAAEC,aAAa;MAAEC;IAAQ,CAAC,GAAAF,IAAA;IAC1D;AACR;AACA;AACA;AACA;IACQC,aAAa,CAACE,cAAc,KAAKF,aAAa,CAACE,cAAc,GAAGR,oBAAoB,CAACM,aAAa,CAAC,CAAC;IACpG;AACR;AACA;IACQ,IAAIT,mBAAmB,CAACU,OAAO,CAAC,EAAE;MAC9BZ,SAAS,CAAC,MAAMY,OAAO,CAACE,SAAS,CAACH,aAAa,CAAC,EAAE,CAACC,OAAO,CAAC,CAAC;IAChE;EACJ,CAAC,CAAC;EACFG,IAAI,EAAER,uBAAuB,CAAES,KAAK,IAAK;IACrC,MAAM;MAAEC,MAAM;MAAEN;IAAc,CAAC,GAAGK,KAAK;IACvC,MAAM,CAACE,SAAS,EAAEC,YAAY,CAAC,GAAGhB,WAAW,EAAE;IAC/C,MAAMiB,eAAe,GAAGnB,UAAU,CAACG,eAAe,CAAC;IACnDJ,SAAS,CAAC,MAAM;MACZW,aAAa,CAACO,SAAS,GAAGA,SAAS;MACnC,MAAMT,SAAS,GAAGE,aAAa,CAACE,cAAc,IAC1CF,aAAa,CAACE,cAAc,CAACQ,SAAS,CAACf,aAAa,CAACgB,IAAI,EAAE,CAACJ,SAAS,EAAE;QACnED,MAAM,EAAGG,eAAe,IAAIA,eAAe,CAACH,MAAM,IAC9CA;MACR,CAAC,CAAC;MACN,IAAIR,SAAS,IAAI,CAACS,SAAS,EAAE;QACzBT,SAAS,CAACc,IAAI,CAACJ,YAAY,CAAC;MAChC;IACJ,CAAC,EAAE,CAACD,SAAS,CAAC,CAAC;EACnB,CAAC;AACL,CAAC;AAED,SAASV,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}