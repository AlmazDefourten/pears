{"ast":null,"code":"import { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/use-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { createMotionValueAnimation } from '../../animation/index.mjs';\nconst elementDragControls = new WeakMap();\n/**\r\n *\r\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n  constructor(visualElement) {\n    // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n    this.openGlobalLock = null;\n    this.isDragging = false;\n    this.currentDirection = null;\n    this.originPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * The permitted boundaries of travel, in pixels.\r\n     */\n    this.constraints = false;\n    this.hasMutatedConstraints = false;\n    /**\r\n     * The per-axis resolved elastic values.\r\n     */\n    this.elastic = createBox();\n    this.visualElement = visualElement;\n  }\n  start(originEvent) {\n    let {\n      snapToCursor = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    /**\r\n     * Don't start dragging if this component is exiting\r\n     */\n    if (this.visualElement.isPresent === false) return;\n    const onSessionStart = event => {\n      // Stop any animations on both axis values immediately. This allows the user to throw and catch\n      // the component.\n      this.stopAnimation();\n      if (snapToCursor) {\n        this.snapToCursor(extractEventInfo(event, \"page\").point);\n      }\n    };\n    const onStart = (event, info) => {\n      var _a;\n      // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n      const {\n        drag,\n        dragPropagation,\n        onDragStart\n      } = this.getProps();\n      if (drag && !dragPropagation) {\n        if (this.openGlobalLock) this.openGlobalLock();\n        this.openGlobalLock = getGlobalLock(drag);\n        // If we don 't have the lock, don't start dragging\n        if (!this.openGlobalLock) return;\n      }\n      this.isDragging = true;\n      this.currentDirection = null;\n      this.resolveConstraints();\n      if (this.visualElement.projection) {\n        this.visualElement.projection.isAnimationBlocked = true;\n        this.visualElement.projection.target = undefined;\n      }\n      /**\r\n       * Record gesture origin\r\n       */\n      eachAxis(axis => {\n        var _a, _b;\n        let current = this.getAxisMotionValue(axis).get() || 0;\n        /**\r\n         * If the MotionValue is a percentage value convert to px\r\n         */\n        if (percent.test(current)) {\n          const measuredAxis = (_b = (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.layoutBox[axis];\n          if (measuredAxis) {\n            const length = calcLength(measuredAxis);\n            current = length * (parseFloat(current) / 100);\n          }\n        }\n        this.originPoint[axis] = current;\n      });\n      // Fire onDragStart event\n      onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\n      (_a = this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, true);\n    };\n    const onMove = (event, info) => {\n      // latestPointerEvent = event\n      const {\n        dragPropagation,\n        dragDirectionLock,\n        onDirectionLock,\n        onDrag\n      } = this.getProps();\n      // If we didn't successfully receive the gesture lock, early return.\n      if (!dragPropagation && !this.openGlobalLock) return;\n      const {\n        offset\n      } = info;\n      // Attempt to detect drag direction if directionLock is true\n      if (dragDirectionLock && this.currentDirection === null) {\n        this.currentDirection = getCurrentDirection(offset);\n        // If we've successfully set a direction, notify listener\n        if (this.currentDirection !== null) {\n          onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(this.currentDirection);\n        }\n        return;\n      }\n      // Update each point with the latest position\n      this.updateAxis(\"x\", info.point, offset);\n      this.updateAxis(\"y\", info.point, offset);\n      /**\r\n       * Ideally we would leave the renderer to fire naturally at the end of\r\n       * this frame but if the element is about to change layout as the result\r\n       * of a re-render we want to ensure the browser can read the latest\r\n       * bounding box to ensure the pointer and element don't fall out of sync.\r\n       */\n      this.visualElement.render();\n      /**\r\n       * This must fire after the render call as it might trigger a state\r\n       * change which itself might trigger a layout update.\r\n       */\n      onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\n    };\n    const onSessionEnd = (event, info) => this.stop(event, info);\n    this.panSession = new PanSession(originEvent, {\n      onSessionStart,\n      onStart,\n      onMove,\n      onSessionEnd\n    }, {\n      transformPagePoint: this.visualElement.getTransformPagePoint()\n    });\n  }\n  stop(event, info) {\n    const isDragging = this.isDragging;\n    this.cancel();\n    if (!isDragging) return;\n    const {\n      velocity\n    } = info;\n    this.startAnimation(velocity);\n    const {\n      onDragEnd\n    } = this.getProps();\n    onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n  }\n  cancel() {\n    var _a, _b;\n    this.isDragging = false;\n    if (this.visualElement.projection) {\n      this.visualElement.projection.isAnimationBlocked = false;\n    }\n    (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n    this.panSession = undefined;\n    const {\n      dragPropagation\n    } = this.getProps();\n    if (!dragPropagation && this.openGlobalLock) {\n      this.openGlobalLock();\n      this.openGlobalLock = null;\n    }\n    (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n  }\n  updateAxis(axis, _point, offset) {\n    const {\n      drag\n    } = this.getProps();\n    // If we're not dragging this axis, do an early return.\n    if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n    const axisValue = this.getAxisMotionValue(axis);\n    let next = this.originPoint[axis] + offset[axis];\n    // Apply constraints\n    if (this.constraints && this.constraints[axis]) {\n      next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n    }\n    axisValue.set(next);\n  }\n  resolveConstraints() {\n    const {\n      dragConstraints,\n      dragElastic\n    } = this.getProps();\n    const {\n      layout\n    } = this.visualElement.projection || {};\n    const prevConstraints = this.constraints;\n    if (dragConstraints && isRefObject(dragConstraints)) {\n      if (!this.constraints) {\n        this.constraints = this.resolveRefConstraints();\n      }\n    } else {\n      if (dragConstraints && layout) {\n        this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n      } else {\n        this.constraints = false;\n      }\n    }\n    this.elastic = resolveDragElastic(dragElastic);\n    /**\r\n     * If we're outputting to external MotionValues, we want to rebase the measured constraints\r\n     * from viewport-relative to component-relative.\r\n     */\n    if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n      eachAxis(axis => {\n        if (this.getAxisMotionValue(axis)) {\n          this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n        }\n      });\n    }\n  }\n  resolveRefConstraints() {\n    const {\n      dragConstraints: constraints,\n      onMeasureDragConstraints\n    } = this.getProps();\n    if (!constraints || !isRefObject(constraints)) return false;\n    const constraintsElement = constraints.current;\n    invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n    const {\n      projection\n    } = this.visualElement;\n    // TODO\n    if (!projection || !projection.layout) return false;\n    const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n    let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n    /**\r\n     * If there's an onMeasureDragConstraints listener we call it and\r\n     * if different constraints are returned, set constraints to that\r\n     */\n    if (onMeasureDragConstraints) {\n      const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n      this.hasMutatedConstraints = !!userConstraints;\n      if (userConstraints) {\n        measuredConstraints = convertBoundingBoxToBox(userConstraints);\n      }\n    }\n    return measuredConstraints;\n  }\n  startAnimation(velocity) {\n    const {\n      drag,\n      dragMomentum,\n      dragElastic,\n      dragTransition,\n      dragSnapToOrigin,\n      onDragTransitionEnd\n    } = this.getProps();\n    const constraints = this.constraints || {};\n    const momentumAnimations = eachAxis(axis => {\n      if (!shouldDrag(axis, drag, this.currentDirection)) {\n        return;\n      }\n      let transition = (constraints === null || constraints === void 0 ? void 0 : constraints[axis]) || {};\n      if (dragSnapToOrigin) transition = {\n        min: 0,\n        max: 0\n      };\n      /**\r\n       * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\r\n       * of spring animations so we should look into adding a disable spring option to `inertia`.\r\n       * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\r\n       * using the value of `dragElastic`.\r\n       */\n      const bounceStiffness = dragElastic ? 200 : 1000000;\n      const bounceDamping = dragElastic ? 40 : 10000000;\n      const inertia = {\n        type: \"inertia\",\n        velocity: dragMomentum ? velocity[axis] : 0,\n        bounceStiffness,\n        bounceDamping,\n        timeConstant: 750,\n        restDelta: 1,\n        restSpeed: 10,\n        ...dragTransition,\n        ...transition\n      };\n      // If we're not animating on an externally-provided `MotionValue` we can use the\n      // component's animation controls which will handle interactions with whileHover (etc),\n      // otherwise we just have to animate the `MotionValue` itself.\n      return this.startAxisValueAnimation(axis, inertia);\n    });\n    // Run all animations and then resolve the new drag constraints.\n    return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n  }\n  startAxisValueAnimation(axis, transition) {\n    const axisValue = this.getAxisMotionValue(axis);\n    return axisValue.start(createMotionValueAnimation(axis, axisValue, 0, transition));\n  }\n  stopAnimation() {\n    eachAxis(axis => this.getAxisMotionValue(axis).stop());\n  }\n  /**\r\n   * Drag works differently depending on which props are provided.\r\n   *\r\n   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\r\n   * - Otherwise, we apply the delta to the x/y motion values.\r\n   */\n  getAxisMotionValue(axis) {\n    var _a;\n    const dragKey = \"_drag\" + axis.toUpperCase();\n    const externalMotionValue = this.visualElement.getProps()[dragKey];\n    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, ((_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) || 0);\n  }\n  snapToCursor(point) {\n    eachAxis(axis => {\n      const {\n        drag\n      } = this.getProps();\n      // If we're not dragging this axis, do an early return.\n      if (!shouldDrag(axis, drag, this.currentDirection)) return;\n      const {\n        projection\n      } = this.visualElement;\n      const axisValue = this.getAxisMotionValue(axis);\n      if (projection && projection.layout) {\n        const {\n          min,\n          max\n        } = projection.layout.layoutBox[axis];\n        axisValue.set(point[axis] - mix(min, max, 0.5));\n      }\n    });\n  }\n  /**\r\n   * When the viewport resizes we want to check if the measured constraints\r\n   * have changed and, if so, reposition the element within those new constraints\r\n   * relative to where it was before the resize.\r\n   */\n  scalePositionWithinConstraints() {\n    var _a;\n    if (!this.visualElement.current) return;\n    const {\n      drag,\n      dragConstraints\n    } = this.getProps();\n    const {\n      projection\n    } = this.visualElement;\n    if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n    /**\r\n     * Stop current animations as there can be visual glitching if we try to do\r\n     * this mid-animation\r\n     */\n    this.stopAnimation();\n    /**\r\n     * Record the relative position of the dragged element relative to the\r\n     * constraints box and save as a progress value.\r\n     */\n    const boxProgress = {\n      x: 0,\n      y: 0\n    };\n    eachAxis(axis => {\n      const axisValue = this.getAxisMotionValue(axis);\n      if (axisValue) {\n        const latest = axisValue.get();\n        boxProgress[axis] = calcOrigin({\n          min: latest,\n          max: latest\n        }, this.constraints[axis]);\n      }\n    });\n    /**\r\n     * Update the layout of this element and resolve the latest drag constraints\r\n     */\n    const {\n      transformTemplate\n    } = this.visualElement.getProps();\n    this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n    (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n    projection.updateLayout();\n    this.resolveConstraints();\n    /**\r\n     * For each axis, calculate the current progress of the layout axis\r\n     * within the new constraints.\r\n     */\n    eachAxis(axis => {\n      if (!shouldDrag(axis, drag, null)) return;\n      /**\r\n       * Calculate a new transform based on the previous box progress\r\n       */\n      const axisValue = this.getAxisMotionValue(axis);\n      const {\n        min,\n        max\n      } = this.constraints[axis];\n      axisValue.set(mix(min, max, boxProgress[axis]));\n    });\n  }\n  addListeners() {\n    var _a;\n    if (!this.visualElement.current) return;\n    elementDragControls.set(this.visualElement, this);\n    const element = this.visualElement.current;\n    /**\r\n     * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\r\n     */\n    const stopPointerListener = addPointerEvent(element, \"pointerdown\", event => {\n      const {\n        drag,\n        dragListener = true\n      } = this.getProps();\n      drag && dragListener && this.start(event);\n    });\n    const measureDragConstraints = () => {\n      const {\n        dragConstraints\n      } = this.getProps();\n      if (isRefObject(dragConstraints)) {\n        this.constraints = this.resolveRefConstraints();\n      }\n    };\n    const {\n      projection\n    } = this.visualElement;\n    const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n    if (projection && !projection.layout) {\n      (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n      projection.updateLayout();\n    }\n    measureDragConstraints();\n    /**\r\n     * Attach a window resize listener to scale the draggable target within its defined\r\n     * constraints as the window resizes.\r\n     */\n    const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n    /**\r\n     * If the element's layout changes, calculate the delta and apply that to\r\n     * the drag gesture's origin point.\r\n     */\n    const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", _ref => {\n      let {\n        delta,\n        hasLayoutChanged\n      } = _ref;\n      if (this.isDragging && hasLayoutChanged) {\n        eachAxis(axis => {\n          const motionValue = this.getAxisMotionValue(axis);\n          if (!motionValue) return;\n          this.originPoint[axis] += delta[axis].translate;\n          motionValue.set(motionValue.get() + delta[axis].translate);\n        });\n        this.visualElement.render();\n      }\n    });\n    return () => {\n      stopResizeListener();\n      stopPointerListener();\n      stopMeasureLayoutListener();\n      stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\n    };\n  }\n  getProps() {\n    const props = this.visualElement.getProps();\n    const {\n      drag = false,\n      dragDirectionLock = false,\n      dragPropagation = false,\n      dragConstraints = false,\n      dragElastic = defaultElastic,\n      dragMomentum = true\n    } = props;\n    return {\n      ...props,\n      drag,\n      dragDirectionLock,\n      dragPropagation,\n      dragConstraints,\n      dragElastic,\n      dragMomentum\n    };\n  }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\r\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\r\n * than the provided threshold, return `null`.\r\n *\r\n * @param offset - The x/y offset from origin.\r\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\r\n */\nfunction getCurrentDirection(offset) {\n  let lockThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  let direction = null;\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n  return direction;\n}\nexport { VisualElementDragControls, elementDragControls };","map":{"version":3,"names":["invariant","PanSession","getGlobalLock","isRefObject","addPointerEvent","applyConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","calcViewportConstraints","calcOrigin","defaultElastic","AnimationType","createBox","eachAxis","measurePageBox","extractEventInfo","convertBoxToBoundingBox","convertBoundingBoxToBox","addDomEvent","calcLength","mix","percent","createMotionValueAnimation","elementDragControls","WeakMap","VisualElementDragControls","constructor","visualElement","openGlobalLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","start","originEvent","snapToCursor","arguments","length","undefined","isPresent","onSessionStart","event","stopAnimation","point","onStart","info","_a","drag","dragPropagation","onDragStart","getProps","resolveConstraints","projection","isAnimationBlocked","target","axis","_b","current","getAxisMotionValue","get","test","measuredAxis","layout","layoutBox","parseFloat","animationState","setActive","Drag","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","render","onSessionEnd","stop","panSession","transformPagePoint","getTransformPagePoint","cancel","velocity","startAnimation","onDragEnd","end","_point","shouldDrag","axisValue","next","set","dragConstraints","dragElastic","prevConstraints","resolveRefConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","root","measuredConstraints","userConstraints","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","dragKey","toUpperCase","externalMotionValue","getValue","initial","scalePositionWithinConstraints","boxProgress","latest","transformTemplate","style","transform","updateScroll","updateLayout","addListeners","element","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","stopResizeListener","window","stopLayoutUpdateListener","_ref","delta","hasLayoutChanged","motionValue","translate","props","direction","lockThreshold","Math","abs"],"sources":["C:/Users/Кирилл/Desktop/gdfjtgj/pears/frontend/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"sourcesContent":["import { invariant } from 'hey-listen';\r\nimport { PanSession } from '../PanSession.mjs';\r\nimport { getGlobalLock } from './utils/lock.mjs';\r\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\r\nimport { addPointerEvent } from '../../events/use-pointer-event.mjs';\r\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\r\nimport { AnimationType } from '../../render/utils/types.mjs';\r\nimport { createBox } from '../../projection/geometry/models.mjs';\r\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\r\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\r\nimport { extractEventInfo } from '../../events/event-info.mjs';\r\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\r\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\r\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\r\nimport { mix } from '../../utils/mix.mjs';\r\nimport { percent } from '../../value/types/numbers/units.mjs';\r\nimport { createMotionValueAnimation } from '../../animation/index.mjs';\r\n\r\nconst elementDragControls = new WeakMap();\r\n/**\r\n *\r\n */\r\n// let latestPointerEvent: PointerEvent\r\nclass VisualElementDragControls {\r\n    constructor(visualElement) {\r\n        // This is a reference to the global drag gesture lock, ensuring only one component\r\n        // can \"capture\" the drag of one or both axes.\r\n        // TODO: Look into moving this into pansession?\r\n        this.openGlobalLock = null;\r\n        this.isDragging = false;\r\n        this.currentDirection = null;\r\n        this.originPoint = { x: 0, y: 0 };\r\n        /**\r\n         * The permitted boundaries of travel, in pixels.\r\n         */\r\n        this.constraints = false;\r\n        this.hasMutatedConstraints = false;\r\n        /**\r\n         * The per-axis resolved elastic values.\r\n         */\r\n        this.elastic = createBox();\r\n        this.visualElement = visualElement;\r\n    }\r\n    start(originEvent, { snapToCursor = false } = {}) {\r\n        /**\r\n         * Don't start dragging if this component is exiting\r\n         */\r\n        if (this.visualElement.isPresent === false)\r\n            return;\r\n        const onSessionStart = (event) => {\r\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\r\n            // the component.\r\n            this.stopAnimation();\r\n            if (snapToCursor) {\r\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\r\n            }\r\n        };\r\n        const onStart = (event, info) => {\r\n            var _a;\r\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\r\n            const { drag, dragPropagation, onDragStart } = this.getProps();\r\n            if (drag && !dragPropagation) {\r\n                if (this.openGlobalLock)\r\n                    this.openGlobalLock();\r\n                this.openGlobalLock = getGlobalLock(drag);\r\n                // If we don 't have the lock, don't start dragging\r\n                if (!this.openGlobalLock)\r\n                    return;\r\n            }\r\n            this.isDragging = true;\r\n            this.currentDirection = null;\r\n            this.resolveConstraints();\r\n            if (this.visualElement.projection) {\r\n                this.visualElement.projection.isAnimationBlocked = true;\r\n                this.visualElement.projection.target = undefined;\r\n            }\r\n            /**\r\n             * Record gesture origin\r\n             */\r\n            eachAxis((axis) => {\r\n                var _a, _b;\r\n                let current = this.getAxisMotionValue(axis).get() || 0;\r\n                /**\r\n                 * If the MotionValue is a percentage value convert to px\r\n                 */\r\n                if (percent.test(current)) {\r\n                    const measuredAxis = (_b = (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.layoutBox[axis];\r\n                    if (measuredAxis) {\r\n                        const length = calcLength(measuredAxis);\r\n                        current = length * (parseFloat(current) / 100);\r\n                    }\r\n                }\r\n                this.originPoint[axis] = current;\r\n            });\r\n            // Fire onDragStart event\r\n            onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\r\n            (_a = this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, true);\r\n        };\r\n        const onMove = (event, info) => {\r\n            // latestPointerEvent = event\r\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\r\n            // If we didn't successfully receive the gesture lock, early return.\r\n            if (!dragPropagation && !this.openGlobalLock)\r\n                return;\r\n            const { offset } = info;\r\n            // Attempt to detect drag direction if directionLock is true\r\n            if (dragDirectionLock && this.currentDirection === null) {\r\n                this.currentDirection = getCurrentDirection(offset);\r\n                // If we've successfully set a direction, notify listener\r\n                if (this.currentDirection !== null) {\r\n                    onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(this.currentDirection);\r\n                }\r\n                return;\r\n            }\r\n            // Update each point with the latest position\r\n            this.updateAxis(\"x\", info.point, offset);\r\n            this.updateAxis(\"y\", info.point, offset);\r\n            /**\r\n             * Ideally we would leave the renderer to fire naturally at the end of\r\n             * this frame but if the element is about to change layout as the result\r\n             * of a re-render we want to ensure the browser can read the latest\r\n             * bounding box to ensure the pointer and element don't fall out of sync.\r\n             */\r\n            this.visualElement.render();\r\n            /**\r\n             * This must fire after the render call as it might trigger a state\r\n             * change which itself might trigger a layout update.\r\n             */\r\n            onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\r\n        };\r\n        const onSessionEnd = (event, info) => this.stop(event, info);\r\n        this.panSession = new PanSession(originEvent, {\r\n            onSessionStart,\r\n            onStart,\r\n            onMove,\r\n            onSessionEnd,\r\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\r\n    }\r\n    stop(event, info) {\r\n        const isDragging = this.isDragging;\r\n        this.cancel();\r\n        if (!isDragging)\r\n            return;\r\n        const { velocity } = info;\r\n        this.startAnimation(velocity);\r\n        const { onDragEnd } = this.getProps();\r\n        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\r\n    }\r\n    cancel() {\r\n        var _a, _b;\r\n        this.isDragging = false;\r\n        if (this.visualElement.projection) {\r\n            this.visualElement.projection.isAnimationBlocked = false;\r\n        }\r\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\r\n        this.panSession = undefined;\r\n        const { dragPropagation } = this.getProps();\r\n        if (!dragPropagation && this.openGlobalLock) {\r\n            this.openGlobalLock();\r\n            this.openGlobalLock = null;\r\n        }\r\n        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\r\n    }\r\n    updateAxis(axis, _point, offset) {\r\n        const { drag } = this.getProps();\r\n        // If we're not dragging this axis, do an early return.\r\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\r\n            return;\r\n        const axisValue = this.getAxisMotionValue(axis);\r\n        let next = this.originPoint[axis] + offset[axis];\r\n        // Apply constraints\r\n        if (this.constraints && this.constraints[axis]) {\r\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\r\n        }\r\n        axisValue.set(next);\r\n    }\r\n    resolveConstraints() {\r\n        const { dragConstraints, dragElastic } = this.getProps();\r\n        const { layout } = this.visualElement.projection || {};\r\n        const prevConstraints = this.constraints;\r\n        if (dragConstraints && isRefObject(dragConstraints)) {\r\n            if (!this.constraints) {\r\n                this.constraints = this.resolveRefConstraints();\r\n            }\r\n        }\r\n        else {\r\n            if (dragConstraints && layout) {\r\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\r\n            }\r\n            else {\r\n                this.constraints = false;\r\n            }\r\n        }\r\n        this.elastic = resolveDragElastic(dragElastic);\r\n        /**\r\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\r\n         * from viewport-relative to component-relative.\r\n         */\r\n        if (prevConstraints !== this.constraints &&\r\n            layout &&\r\n            this.constraints &&\r\n            !this.hasMutatedConstraints) {\r\n            eachAxis((axis) => {\r\n                if (this.getAxisMotionValue(axis)) {\r\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    resolveRefConstraints() {\r\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\r\n        if (!constraints || !isRefObject(constraints))\r\n            return false;\r\n        const constraintsElement = constraints.current;\r\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\r\n        const { projection } = this.visualElement;\r\n        // TODO\r\n        if (!projection || !projection.layout)\r\n            return false;\r\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\r\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\r\n        /**\r\n         * If there's an onMeasureDragConstraints listener we call it and\r\n         * if different constraints are returned, set constraints to that\r\n         */\r\n        if (onMeasureDragConstraints) {\r\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\r\n            this.hasMutatedConstraints = !!userConstraints;\r\n            if (userConstraints) {\r\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\r\n            }\r\n        }\r\n        return measuredConstraints;\r\n    }\r\n    startAnimation(velocity) {\r\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\r\n        const constraints = this.constraints || {};\r\n        const momentumAnimations = eachAxis((axis) => {\r\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\r\n                return;\r\n            }\r\n            let transition = (constraints === null || constraints === void 0 ? void 0 : constraints[axis]) || {};\r\n            if (dragSnapToOrigin)\r\n                transition = { min: 0, max: 0 };\r\n            /**\r\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\r\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\r\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\r\n             * using the value of `dragElastic`.\r\n             */\r\n            const bounceStiffness = dragElastic ? 200 : 1000000;\r\n            const bounceDamping = dragElastic ? 40 : 10000000;\r\n            const inertia = {\r\n                type: \"inertia\",\r\n                velocity: dragMomentum ? velocity[axis] : 0,\r\n                bounceStiffness,\r\n                bounceDamping,\r\n                timeConstant: 750,\r\n                restDelta: 1,\r\n                restSpeed: 10,\r\n                ...dragTransition,\r\n                ...transition,\r\n            };\r\n            // If we're not animating on an externally-provided `MotionValue` we can use the\r\n            // component's animation controls which will handle interactions with whileHover (etc),\r\n            // otherwise we just have to animate the `MotionValue` itself.\r\n            return this.startAxisValueAnimation(axis, inertia);\r\n        });\r\n        // Run all animations and then resolve the new drag constraints.\r\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\r\n    }\r\n    startAxisValueAnimation(axis, transition) {\r\n        const axisValue = this.getAxisMotionValue(axis);\r\n        return axisValue.start(createMotionValueAnimation(axis, axisValue, 0, transition));\r\n    }\r\n    stopAnimation() {\r\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\r\n    }\r\n    /**\r\n     * Drag works differently depending on which props are provided.\r\n     *\r\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\r\n     * - Otherwise, we apply the delta to the x/y motion values.\r\n     */\r\n    getAxisMotionValue(axis) {\r\n        var _a;\r\n        const dragKey = \"_drag\" + axis.toUpperCase();\r\n        const externalMotionValue = this.visualElement.getProps()[dragKey];\r\n        return externalMotionValue\r\n            ? externalMotionValue\r\n            : this.visualElement.getValue(axis, ((_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) || 0);\r\n    }\r\n    snapToCursor(point) {\r\n        eachAxis((axis) => {\r\n            const { drag } = this.getProps();\r\n            // If we're not dragging this axis, do an early return.\r\n            if (!shouldDrag(axis, drag, this.currentDirection))\r\n                return;\r\n            const { projection } = this.visualElement;\r\n            const axisValue = this.getAxisMotionValue(axis);\r\n            if (projection && projection.layout) {\r\n                const { min, max } = projection.layout.layoutBox[axis];\r\n                axisValue.set(point[axis] - mix(min, max, 0.5));\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * When the viewport resizes we want to check if the measured constraints\r\n     * have changed and, if so, reposition the element within those new constraints\r\n     * relative to where it was before the resize.\r\n     */\r\n    scalePositionWithinConstraints() {\r\n        var _a;\r\n        if (!this.visualElement.current)\r\n            return;\r\n        const { drag, dragConstraints } = this.getProps();\r\n        const { projection } = this.visualElement;\r\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\r\n            return;\r\n        /**\r\n         * Stop current animations as there can be visual glitching if we try to do\r\n         * this mid-animation\r\n         */\r\n        this.stopAnimation();\r\n        /**\r\n         * Record the relative position of the dragged element relative to the\r\n         * constraints box and save as a progress value.\r\n         */\r\n        const boxProgress = { x: 0, y: 0 };\r\n        eachAxis((axis) => {\r\n            const axisValue = this.getAxisMotionValue(axis);\r\n            if (axisValue) {\r\n                const latest = axisValue.get();\r\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\r\n            }\r\n        });\r\n        /**\r\n         * Update the layout of this element and resolve the latest drag constraints\r\n         */\r\n        const { transformTemplate } = this.visualElement.getProps();\r\n        this.visualElement.current.style.transform = transformTemplate\r\n            ? transformTemplate({}, \"\")\r\n            : \"none\";\r\n        (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\r\n        projection.updateLayout();\r\n        this.resolveConstraints();\r\n        /**\r\n         * For each axis, calculate the current progress of the layout axis\r\n         * within the new constraints.\r\n         */\r\n        eachAxis((axis) => {\r\n            if (!shouldDrag(axis, drag, null))\r\n                return;\r\n            /**\r\n             * Calculate a new transform based on the previous box progress\r\n             */\r\n            const axisValue = this.getAxisMotionValue(axis);\r\n            const { min, max } = this.constraints[axis];\r\n            axisValue.set(mix(min, max, boxProgress[axis]));\r\n        });\r\n    }\r\n    addListeners() {\r\n        var _a;\r\n        if (!this.visualElement.current)\r\n            return;\r\n        elementDragControls.set(this.visualElement, this);\r\n        const element = this.visualElement.current;\r\n        /**\r\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\r\n         */\r\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\r\n            const { drag, dragListener = true } = this.getProps();\r\n            drag && dragListener && this.start(event);\r\n        });\r\n        const measureDragConstraints = () => {\r\n            const { dragConstraints } = this.getProps();\r\n            if (isRefObject(dragConstraints)) {\r\n                this.constraints = this.resolveRefConstraints();\r\n            }\r\n        };\r\n        const { projection } = this.visualElement;\r\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\r\n        if (projection && !projection.layout) {\r\n            (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\r\n            projection.updateLayout();\r\n        }\r\n        measureDragConstraints();\r\n        /**\r\n         * Attach a window resize listener to scale the draggable target within its defined\r\n         * constraints as the window resizes.\r\n         */\r\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\r\n        /**\r\n         * If the element's layout changes, calculate the delta and apply that to\r\n         * the drag gesture's origin point.\r\n         */\r\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\r\n            if (this.isDragging && hasLayoutChanged) {\r\n                eachAxis((axis) => {\r\n                    const motionValue = this.getAxisMotionValue(axis);\r\n                    if (!motionValue)\r\n                        return;\r\n                    this.originPoint[axis] += delta[axis].translate;\r\n                    motionValue.set(motionValue.get() + delta[axis].translate);\r\n                });\r\n                this.visualElement.render();\r\n            }\r\n        }));\r\n        return () => {\r\n            stopResizeListener();\r\n            stopPointerListener();\r\n            stopMeasureLayoutListener();\r\n            stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\r\n        };\r\n    }\r\n    getProps() {\r\n        const props = this.visualElement.getProps();\r\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\r\n        return {\r\n            ...props,\r\n            drag,\r\n            dragDirectionLock,\r\n            dragPropagation,\r\n            dragConstraints,\r\n            dragElastic,\r\n            dragMomentum,\r\n        };\r\n    }\r\n}\r\nfunction shouldDrag(direction, drag, currentDirection) {\r\n    return ((drag === true || drag === direction) &&\r\n        (currentDirection === null || currentDirection === direction));\r\n}\r\n/**\r\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\r\n * than the provided threshold, return `null`.\r\n *\r\n * @param offset - The x/y offset from origin.\r\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\r\n */\r\nfunction getCurrentDirection(offset, lockThreshold = 10) {\r\n    let direction = null;\r\n    if (Math.abs(offset.y) > lockThreshold) {\r\n        direction = \"y\";\r\n    }\r\n    else if (Math.abs(offset.x) > lockThreshold) {\r\n        direction = \"x\";\r\n    }\r\n    return direction;\r\n}\r\n\r\nexport { VisualElementDragControls, elementDragControls };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}