{"ast":null,"code":"import { noopReturn, defaults, isEasingGenerator, isEasingList, interpolate } from '@motionone/utils';\nimport { getEasingFunction } from './utils/easing.es.js';\nclass Animation {\n  constructor(output) {\n    let keyframes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 1];\n    let {\n      easing,\n      duration: initialDuration = defaults.duration,\n      delay = defaults.delay,\n      endDelay = defaults.endDelay,\n      repeat = defaults.repeat,\n      offset,\n      direction = \"normal\"\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.startTime = null;\n    this.rate = 1;\n    this.t = 0;\n    this.cancelTimestamp = null;\n    this.easing = noopReturn;\n    this.duration = 0;\n    this.totalDuration = 0;\n    this.repeat = 0;\n    this.playState = \"idle\";\n    this.finished = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n    easing = easing || defaults.easing;\n    if (isEasingGenerator(easing)) {\n      const custom = easing.createAnimation(keyframes);\n      easing = custom.easing;\n      keyframes = custom.keyframes || keyframes;\n      initialDuration = custom.duration || initialDuration;\n    }\n    this.repeat = repeat;\n    this.easing = isEasingList(easing) ? noopReturn : getEasingFunction(easing);\n    this.updateDuration(initialDuration);\n    const interpolate$1 = interpolate(keyframes, offset, isEasingList(easing) ? easing.map(getEasingFunction) : noopReturn);\n    this.tick = timestamp => {\n      var _a;\n      // TODO: Temporary fix for OptionsResolver typing\n      delay = delay;\n      let t = 0;\n      if (this.pauseTime !== undefined) {\n        t = this.pauseTime;\n      } else {\n        t = (timestamp - this.startTime) * this.rate;\n      }\n      this.t = t;\n      // Convert to seconds\n      t /= 1000;\n      // Rebase on delay\n      t = Math.max(t - delay, 0);\n      /**\r\n       * If this animation has finished, set the current time\r\n       * to the total duration.\r\n       */\n      if (this.playState === \"finished\" && this.pauseTime === undefined) {\n        t = this.totalDuration;\n      }\n      /**\r\n       * Get the current progress (0-1) of the animation. If t is >\r\n       * than duration we'll get values like 2.5 (midway through the\r\n       * third iteration)\r\n       */\n      const progress = t / this.duration;\n      // TODO progress += iterationStart\n      /**\r\n       * Get the current iteration (0 indexed). For instance the floor of\r\n       * 2.5 is 2.\r\n       */\n      let currentIteration = Math.floor(progress);\n      /**\r\n       * Get the current progress of the iteration by taking the remainder\r\n       * so 2.5 is 0.5 through iteration 2\r\n       */\n      let iterationProgress = progress % 1.0;\n      if (!iterationProgress && progress >= 1) {\n        iterationProgress = 1;\n      }\n      /**\r\n       * If iteration progress is 1 we count that as the end\r\n       * of the previous iteration.\r\n       */\n      iterationProgress === 1 && currentIteration--;\n      /**\r\n       * Reverse progress if we're not running in \"normal\" direction\r\n       */\n      const iterationIsOdd = currentIteration % 2;\n      if (direction === \"reverse\" || direction === \"alternate\" && iterationIsOdd || direction === \"alternate-reverse\" && !iterationIsOdd) {\n        iterationProgress = 1 - iterationProgress;\n      }\n      const p = t >= this.totalDuration ? 1 : Math.min(iterationProgress, 1);\n      const latest = interpolate$1(this.easing(p));\n      output(latest);\n      const isAnimationFinished = this.pauseTime === undefined && (this.playState === \"finished\" || t >= this.totalDuration + endDelay);\n      if (isAnimationFinished) {\n        this.playState = \"finished\";\n        (_a = this.resolve) === null || _a === void 0 ? void 0 : _a.call(this, latest);\n      } else if (this.playState !== \"idle\") {\n        this.frameRequestId = requestAnimationFrame(this.tick);\n      }\n    };\n    this.play();\n  }\n  play() {\n    const now = performance.now();\n    this.playState = \"running\";\n    if (this.pauseTime !== undefined) {\n      this.startTime = now - this.pauseTime;\n    } else if (!this.startTime) {\n      this.startTime = now;\n    }\n    this.cancelTimestamp = this.startTime;\n    this.pauseTime = undefined;\n    this.frameRequestId = requestAnimationFrame(this.tick);\n  }\n  pause() {\n    this.playState = \"paused\";\n    this.pauseTime = this.t;\n  }\n  finish() {\n    this.playState = \"finished\";\n    this.tick(0);\n  }\n  stop() {\n    var _a;\n    this.playState = \"idle\";\n    if (this.frameRequestId !== undefined) {\n      cancelAnimationFrame(this.frameRequestId);\n    }\n    (_a = this.reject) === null || _a === void 0 ? void 0 : _a.call(this, false);\n  }\n  cancel() {\n    this.stop();\n    this.tick(this.cancelTimestamp);\n  }\n  reverse() {\n    this.rate *= -1;\n  }\n  commitStyles() {}\n  updateDuration(duration) {\n    this.duration = duration;\n    this.totalDuration = duration * (this.repeat + 1);\n  }\n  get currentTime() {\n    return this.t;\n  }\n  set currentTime(t) {\n    if (this.pauseTime !== undefined || this.rate === 0) {\n      this.pauseTime = t;\n    } else {\n      this.startTime = performance.now() - t / this.rate;\n    }\n  }\n  get playbackRate() {\n    return this.rate;\n  }\n  set playbackRate(rate) {\n    this.rate = rate;\n  }\n}\nexport { Animation };","map":{"version":3,"names":["noopReturn","defaults","isEasingGenerator","isEasingList","interpolate","getEasingFunction","Animation","constructor","output","keyframes","arguments","length","undefined","easing","duration","initialDuration","delay","endDelay","repeat","offset","direction","startTime","rate","t","cancelTimestamp","totalDuration","playState","finished","Promise","resolve","reject","custom","createAnimation","updateDuration","interpolate$1","map","tick","timestamp","_a","pauseTime","Math","max","progress","currentIteration","floor","iterationProgress","iterationIsOdd","p","min","latest","isAnimationFinished","call","frameRequestId","requestAnimationFrame","play","now","performance","pause","finish","stop","cancelAnimationFrame","cancel","reverse","commitStyles","currentTime","playbackRate"],"sources":["C:/Users/Кирилл/Desktop/gdfjtgj/pears/frontend/node_modules/@motionone/animation/dist/Animation.es.js"],"sourcesContent":["import { noopReturn, defaults, isEasingGenerator, isEasingList, interpolate } from '@motionone/utils';\r\nimport { getEasingFunction } from './utils/easing.es.js';\r\n\r\nclass Animation {\r\n    constructor(output, keyframes = [0, 1], { easing, duration: initialDuration = defaults.duration, delay = defaults.delay, endDelay = defaults.endDelay, repeat = defaults.repeat, offset, direction = \"normal\", } = {}) {\r\n        this.startTime = null;\r\n        this.rate = 1;\r\n        this.t = 0;\r\n        this.cancelTimestamp = null;\r\n        this.easing = noopReturn;\r\n        this.duration = 0;\r\n        this.totalDuration = 0;\r\n        this.repeat = 0;\r\n        this.playState = \"idle\";\r\n        this.finished = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n        easing = easing || defaults.easing;\r\n        if (isEasingGenerator(easing)) {\r\n            const custom = easing.createAnimation(keyframes);\r\n            easing = custom.easing;\r\n            keyframes = custom.keyframes || keyframes;\r\n            initialDuration = custom.duration || initialDuration;\r\n        }\r\n        this.repeat = repeat;\r\n        this.easing = isEasingList(easing) ? noopReturn : getEasingFunction(easing);\r\n        this.updateDuration(initialDuration);\r\n        const interpolate$1 = interpolate(keyframes, offset, isEasingList(easing) ? easing.map(getEasingFunction) : noopReturn);\r\n        this.tick = (timestamp) => {\r\n            var _a;\r\n            // TODO: Temporary fix for OptionsResolver typing\r\n            delay = delay;\r\n            let t = 0;\r\n            if (this.pauseTime !== undefined) {\r\n                t = this.pauseTime;\r\n            }\r\n            else {\r\n                t = (timestamp - this.startTime) * this.rate;\r\n            }\r\n            this.t = t;\r\n            // Convert to seconds\r\n            t /= 1000;\r\n            // Rebase on delay\r\n            t = Math.max(t - delay, 0);\r\n            /**\r\n             * If this animation has finished, set the current time\r\n             * to the total duration.\r\n             */\r\n            if (this.playState === \"finished\" && this.pauseTime === undefined) {\r\n                t = this.totalDuration;\r\n            }\r\n            /**\r\n             * Get the current progress (0-1) of the animation. If t is >\r\n             * than duration we'll get values like 2.5 (midway through the\r\n             * third iteration)\r\n             */\r\n            const progress = t / this.duration;\r\n            // TODO progress += iterationStart\r\n            /**\r\n             * Get the current iteration (0 indexed). For instance the floor of\r\n             * 2.5 is 2.\r\n             */\r\n            let currentIteration = Math.floor(progress);\r\n            /**\r\n             * Get the current progress of the iteration by taking the remainder\r\n             * so 2.5 is 0.5 through iteration 2\r\n             */\r\n            let iterationProgress = progress % 1.0;\r\n            if (!iterationProgress && progress >= 1) {\r\n                iterationProgress = 1;\r\n            }\r\n            /**\r\n             * If iteration progress is 1 we count that as the end\r\n             * of the previous iteration.\r\n             */\r\n            iterationProgress === 1 && currentIteration--;\r\n            /**\r\n             * Reverse progress if we're not running in \"normal\" direction\r\n             */\r\n            const iterationIsOdd = currentIteration % 2;\r\n            if (direction === \"reverse\" ||\r\n                (direction === \"alternate\" && iterationIsOdd) ||\r\n                (direction === \"alternate-reverse\" && !iterationIsOdd)) {\r\n                iterationProgress = 1 - iterationProgress;\r\n            }\r\n            const p = t >= this.totalDuration ? 1 : Math.min(iterationProgress, 1);\r\n            const latest = interpolate$1(this.easing(p));\r\n            output(latest);\r\n            const isAnimationFinished = this.pauseTime === undefined &&\r\n                (this.playState === \"finished\" || t >= this.totalDuration + endDelay);\r\n            if (isAnimationFinished) {\r\n                this.playState = \"finished\";\r\n                (_a = this.resolve) === null || _a === void 0 ? void 0 : _a.call(this, latest);\r\n            }\r\n            else if (this.playState !== \"idle\") {\r\n                this.frameRequestId = requestAnimationFrame(this.tick);\r\n            }\r\n        };\r\n        this.play();\r\n    }\r\n    play() {\r\n        const now = performance.now();\r\n        this.playState = \"running\";\r\n        if (this.pauseTime !== undefined) {\r\n            this.startTime = now - this.pauseTime;\r\n        }\r\n        else if (!this.startTime) {\r\n            this.startTime = now;\r\n        }\r\n        this.cancelTimestamp = this.startTime;\r\n        this.pauseTime = undefined;\r\n        this.frameRequestId = requestAnimationFrame(this.tick);\r\n    }\r\n    pause() {\r\n        this.playState = \"paused\";\r\n        this.pauseTime = this.t;\r\n    }\r\n    finish() {\r\n        this.playState = \"finished\";\r\n        this.tick(0);\r\n    }\r\n    stop() {\r\n        var _a;\r\n        this.playState = \"idle\";\r\n        if (this.frameRequestId !== undefined) {\r\n            cancelAnimationFrame(this.frameRequestId);\r\n        }\r\n        (_a = this.reject) === null || _a === void 0 ? void 0 : _a.call(this, false);\r\n    }\r\n    cancel() {\r\n        this.stop();\r\n        this.tick(this.cancelTimestamp);\r\n    }\r\n    reverse() {\r\n        this.rate *= -1;\r\n    }\r\n    commitStyles() { }\r\n    updateDuration(duration) {\r\n        this.duration = duration;\r\n        this.totalDuration = duration * (this.repeat + 1);\r\n    }\r\n    get currentTime() {\r\n        return this.t;\r\n    }\r\n    set currentTime(t) {\r\n        if (this.pauseTime !== undefined || this.rate === 0) {\r\n            this.pauseTime = t;\r\n        }\r\n        else {\r\n            this.startTime = performance.now() - t / this.rate;\r\n        }\r\n    }\r\n    get playbackRate() {\r\n        return this.rate;\r\n    }\r\n    set playbackRate(rate) {\r\n        this.rate = rate;\r\n    }\r\n}\r\n\r\nexport { Animation };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}