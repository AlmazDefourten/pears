{"ast":null,"code":"import { getAnimationData, getMotionValue } from './data.es.js';\nimport { isCssVar, registerCssVariable } from './utils/css-var.es.js';\nimport { defaults, isEasingGenerator, isFunction, isEasingList, isNumber, time, noop } from '@motionone/utils';\nimport { isTransform, addTransformToElement, transformDefinitions } from './utils/transforms.es.js';\nimport { convertEasing } from './utils/easing.es.js';\nimport { supports } from './utils/feature-detection.es.js';\nimport { hydrateKeyframes, keyframesList } from './utils/keyframes.es.js';\nimport { style } from './style.es.js';\nimport { getStyleName } from './utils/get-style-name.es.js';\nimport { stopAnimation } from './utils/stop-animation.es.js';\nimport { getUnitConverter } from './utils/get-unit.es.js';\nfunction getDevToolsRecord() {\n  return window.__MOTION_DEV_TOOLS_RECORD;\n}\nfunction animateStyle(element, key, keyframesDefinition) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let AnimationPolyfill = arguments.length > 4 ? arguments[4] : undefined;\n  const record = getDevToolsRecord();\n  const isRecording = options.record !== false && record;\n  let animation;\n  let {\n    duration = defaults.duration,\n    delay = defaults.delay,\n    endDelay = defaults.endDelay,\n    repeat = defaults.repeat,\n    easing = defaults.easing,\n    persist = false,\n    direction,\n    offset,\n    allowWebkitAcceleration = false\n  } = options;\n  const data = getAnimationData(element);\n  const valueIsTransform = isTransform(key);\n  let canAnimateNatively = supports.waapi();\n  /**\r\n   * If this is an individual transform, we need to map its\r\n   * key to a CSS variable and update the element's transform style\r\n   */\n  valueIsTransform && addTransformToElement(element, key);\n  const name = getStyleName(key);\n  const motionValue = getMotionValue(data.values, name);\n  /**\r\n   * Get definition of value, this will be used to convert numerical\r\n   * keyframes into the default value type.\r\n   */\n  const definition = transformDefinitions.get(name);\n  /**\r\n   * Stop the current animation, if any. Because this will trigger\r\n   * commitStyles (DOM writes) and we might later trigger DOM reads,\r\n   * this is fired now and we return a factory function to create\r\n   * the actual animation that can get called in batch,\r\n   */\n  stopAnimation(motionValue.animation, !(isEasingGenerator(easing) && motionValue.generator) && options.record !== false);\n  /**\r\n   * Batchable factory function containing all DOM reads.\r\n   */\n  return () => {\n    const readInitialValue = () => {\n      var _a, _b;\n      return (_b = (_a = style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0;\n    };\n    /**\r\n     * Replace null values with the previous keyframe value, or read\r\n     * it from the DOM if it's the first keyframe.\r\n     */\n    let keyframes = hydrateKeyframes(keyframesList(keyframesDefinition), readInitialValue);\n    /**\r\n     * Detect unit type of keyframes.\r\n     */\n    const toUnit = getUnitConverter(keyframes, definition);\n    if (isEasingGenerator(easing)) {\n      const custom = easing.createAnimation(keyframes, key !== \"opacity\", readInitialValue, name, motionValue);\n      easing = custom.easing;\n      keyframes = custom.keyframes || keyframes;\n      duration = custom.duration || duration;\n    }\n    /**\r\n     * If this is a CSS variable we need to register it with the browser\r\n     * before it can be animated natively. We also set it with setProperty\r\n     * rather than directly onto the element.style object.\r\n     */\n    if (isCssVar(name)) {\n      if (supports.cssRegisterProperty()) {\n        registerCssVariable(name);\n      } else {\n        canAnimateNatively = false;\n      }\n    }\n    /**\r\n     * If we've been passed a custom easing function, and this browser\r\n     * does **not** support linear() easing, and the value is a transform\r\n     * (and thus a pure number) we can still support the custom easing\r\n     * by falling back to the animation polyfill.\r\n     */\n    if (valueIsTransform && !supports.linearEasing() && (isFunction(easing) || isEasingList(easing) && easing.some(isFunction))) {\n      canAnimateNatively = false;\n    }\n    /**\r\n     * If we can animate this value with WAAPI, do so.\r\n     */\n    if (canAnimateNatively) {\n      /**\r\n       * Convert numbers to default value types. Currently this only supports\r\n       * transforms but it could also support other value types.\r\n       */\n      if (definition) {\n        keyframes = keyframes.map(value => isNumber(value) ? definition.toDefaultUnit(value) : value);\n      }\n      /**\r\n       * If this browser doesn't support partial/implicit keyframes we need to\r\n       * explicitly provide one.\r\n       */\n      if (keyframes.length === 1 && (!supports.partialKeyframes() || isRecording)) {\n        keyframes.unshift(readInitialValue());\n      }\n      const animationOptions = {\n        delay: time.ms(delay),\n        duration: time.ms(duration),\n        endDelay: time.ms(endDelay),\n        easing: !isEasingList(easing) ? convertEasing(easing, duration) : undefined,\n        direction,\n        iterations: repeat + 1,\n        fill: \"both\"\n      };\n      animation = element.animate({\n        [name]: keyframes,\n        offset,\n        easing: isEasingList(easing) ? easing.map(thisEasing => convertEasing(thisEasing, duration)) : undefined\n      }, animationOptions);\n      /**\r\n       * Polyfill finished Promise in browsers that don't support it\r\n       */\n      if (!animation.finished) {\n        animation.finished = new Promise((resolve, reject) => {\n          animation.onfinish = resolve;\n          animation.oncancel = reject;\n        });\n      }\n      const target = keyframes[keyframes.length - 1];\n      animation.finished.then(() => {\n        if (persist) return;\n        // Apply styles to target\n        style.set(element, name, target);\n        // Ensure fill modes don't persist\n        animation.cancel();\n      }).catch(noop);\n      /**\r\n       * This forces Webkit to run animations on the main thread by exploiting\r\n       * this condition:\r\n       * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\r\n       *\r\n       * This fixes Webkit's timing bugs, like accelerated animations falling\r\n       * out of sync with main thread animations and massive delays in starting\r\n       * accelerated animations in WKWebView.\r\n       */\n      if (!allowWebkitAcceleration) animation.playbackRate = 1.000001;\n      /**\r\n       * If we can't animate the value natively then we can fallback to the numbers-only\r\n       * polyfill for transforms.\r\n       */\n    } else if (AnimationPolyfill && valueIsTransform) {\n      /**\r\n       * If any keyframe is a string (because we measured it from the DOM), we need to convert\r\n       * it into a number before passing to the Animation polyfill.\r\n       */\n      keyframes = keyframes.map(value => typeof value === \"string\" ? parseFloat(value) : value);\n      /**\r\n       * If we only have a single keyframe, we need to create an initial keyframe by reading\r\n       * the current value from the DOM.\r\n       */\n      if (keyframes.length === 1) {\n        keyframes.unshift(parseFloat(readInitialValue()));\n      }\n      animation = new AnimationPolyfill(latest => {\n        style.set(element, name, toUnit ? toUnit(latest) : latest);\n      }, keyframes, Object.assign(Object.assign({}, options), {\n        duration,\n        easing\n      }));\n    } else {\n      const target = keyframes[keyframes.length - 1];\n      style.set(element, name, definition && isNumber(target) ? definition.toDefaultUnit(target) : target);\n    }\n    if (isRecording) {\n      record(element, key, keyframes, {\n        duration,\n        delay: delay,\n        easing,\n        repeat,\n        offset\n      }, \"motion-one\");\n    }\n    motionValue.setAnimation(animation);\n    return animation;\n  };\n}\nexport { animateStyle };","map":{"version":3,"names":["getAnimationData","getMotionValue","isCssVar","registerCssVariable","defaults","isEasingGenerator","isFunction","isEasingList","isNumber","time","noop","isTransform","addTransformToElement","transformDefinitions","convertEasing","supports","hydrateKeyframes","keyframesList","style","getStyleName","stopAnimation","getUnitConverter","getDevToolsRecord","window","__MOTION_DEV_TOOLS_RECORD","animateStyle","element","key","keyframesDefinition","options","arguments","length","undefined","AnimationPolyfill","record","isRecording","animation","duration","delay","endDelay","repeat","easing","persist","direction","offset","allowWebkitAcceleration","data","valueIsTransform","canAnimateNatively","waapi","name","motionValue","values","definition","get","generator","readInitialValue","_a","_b","initialValue","keyframes","toUnit","custom","createAnimation","cssRegisterProperty","linearEasing","some","map","value","toDefaultUnit","partialKeyframes","unshift","animationOptions","ms","iterations","fill","animate","thisEasing","finished","Promise","resolve","reject","onfinish","oncancel","target","then","set","cancel","catch","playbackRate","parseFloat","latest","Object","assign","setAnimation"],"sources":["C:/Users/Кирилл/Desktop/here/pears/frontend/node_modules/@motionone/dom/dist/animate/animate-style.es.js"],"sourcesContent":["import { getAnimationData, getMotionValue } from './data.es.js';\r\nimport { isCssVar, registerCssVariable } from './utils/css-var.es.js';\r\nimport { defaults, isEasingGenerator, isFunction, isEasingList, isNumber, time, noop } from '@motionone/utils';\r\nimport { isTransform, addTransformToElement, transformDefinitions } from './utils/transforms.es.js';\r\nimport { convertEasing } from './utils/easing.es.js';\r\nimport { supports } from './utils/feature-detection.es.js';\r\nimport { hydrateKeyframes, keyframesList } from './utils/keyframes.es.js';\r\nimport { style } from './style.es.js';\r\nimport { getStyleName } from './utils/get-style-name.es.js';\r\nimport { stopAnimation } from './utils/stop-animation.es.js';\r\nimport { getUnitConverter } from './utils/get-unit.es.js';\r\n\r\nfunction getDevToolsRecord() {\r\n    return window.__MOTION_DEV_TOOLS_RECORD;\r\n}\r\nfunction animateStyle(element, key, keyframesDefinition, options = {}, AnimationPolyfill) {\r\n    const record = getDevToolsRecord();\r\n    const isRecording = options.record !== false && record;\r\n    let animation;\r\n    let { duration = defaults.duration, delay = defaults.delay, endDelay = defaults.endDelay, repeat = defaults.repeat, easing = defaults.easing, persist = false, direction, offset, allowWebkitAcceleration = false, } = options;\r\n    const data = getAnimationData(element);\r\n    const valueIsTransform = isTransform(key);\r\n    let canAnimateNatively = supports.waapi();\r\n    /**\r\n     * If this is an individual transform, we need to map its\r\n     * key to a CSS variable and update the element's transform style\r\n     */\r\n    valueIsTransform && addTransformToElement(element, key);\r\n    const name = getStyleName(key);\r\n    const motionValue = getMotionValue(data.values, name);\r\n    /**\r\n     * Get definition of value, this will be used to convert numerical\r\n     * keyframes into the default value type.\r\n     */\r\n    const definition = transformDefinitions.get(name);\r\n    /**\r\n     * Stop the current animation, if any. Because this will trigger\r\n     * commitStyles (DOM writes) and we might later trigger DOM reads,\r\n     * this is fired now and we return a factory function to create\r\n     * the actual animation that can get called in batch,\r\n     */\r\n    stopAnimation(motionValue.animation, !(isEasingGenerator(easing) && motionValue.generator) &&\r\n        options.record !== false);\r\n    /**\r\n     * Batchable factory function containing all DOM reads.\r\n     */\r\n    return () => {\r\n        const readInitialValue = () => { var _a, _b; return (_b = (_a = style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0; };\r\n        /**\r\n         * Replace null values with the previous keyframe value, or read\r\n         * it from the DOM if it's the first keyframe.\r\n         */\r\n        let keyframes = hydrateKeyframes(keyframesList(keyframesDefinition), readInitialValue);\r\n        /**\r\n         * Detect unit type of keyframes.\r\n         */\r\n        const toUnit = getUnitConverter(keyframes, definition);\r\n        if (isEasingGenerator(easing)) {\r\n            const custom = easing.createAnimation(keyframes, key !== \"opacity\", readInitialValue, name, motionValue);\r\n            easing = custom.easing;\r\n            keyframes = custom.keyframes || keyframes;\r\n            duration = custom.duration || duration;\r\n        }\r\n        /**\r\n         * If this is a CSS variable we need to register it with the browser\r\n         * before it can be animated natively. We also set it with setProperty\r\n         * rather than directly onto the element.style object.\r\n         */\r\n        if (isCssVar(name)) {\r\n            if (supports.cssRegisterProperty()) {\r\n                registerCssVariable(name);\r\n            }\r\n            else {\r\n                canAnimateNatively = false;\r\n            }\r\n        }\r\n        /**\r\n         * If we've been passed a custom easing function, and this browser\r\n         * does **not** support linear() easing, and the value is a transform\r\n         * (and thus a pure number) we can still support the custom easing\r\n         * by falling back to the animation polyfill.\r\n         */\r\n        if (valueIsTransform &&\r\n            !supports.linearEasing() &&\r\n            (isFunction(easing) || (isEasingList(easing) && easing.some(isFunction)))) {\r\n            canAnimateNatively = false;\r\n        }\r\n        /**\r\n         * If we can animate this value with WAAPI, do so.\r\n         */\r\n        if (canAnimateNatively) {\r\n            /**\r\n             * Convert numbers to default value types. Currently this only supports\r\n             * transforms but it could also support other value types.\r\n             */\r\n            if (definition) {\r\n                keyframes = keyframes.map((value) => isNumber(value) ? definition.toDefaultUnit(value) : value);\r\n            }\r\n            /**\r\n             * If this browser doesn't support partial/implicit keyframes we need to\r\n             * explicitly provide one.\r\n             */\r\n            if (keyframes.length === 1 &&\r\n                (!supports.partialKeyframes() || isRecording)) {\r\n                keyframes.unshift(readInitialValue());\r\n            }\r\n            const animationOptions = {\r\n                delay: time.ms(delay),\r\n                duration: time.ms(duration),\r\n                endDelay: time.ms(endDelay),\r\n                easing: !isEasingList(easing)\r\n                    ? convertEasing(easing, duration)\r\n                    : undefined,\r\n                direction,\r\n                iterations: repeat + 1,\r\n                fill: \"both\",\r\n            };\r\n            animation = element.animate({\r\n                [name]: keyframes,\r\n                offset,\r\n                easing: isEasingList(easing)\r\n                    ? easing.map((thisEasing) => convertEasing(thisEasing, duration))\r\n                    : undefined,\r\n            }, animationOptions);\r\n            /**\r\n             * Polyfill finished Promise in browsers that don't support it\r\n             */\r\n            if (!animation.finished) {\r\n                animation.finished = new Promise((resolve, reject) => {\r\n                    animation.onfinish = resolve;\r\n                    animation.oncancel = reject;\r\n                });\r\n            }\r\n            const target = keyframes[keyframes.length - 1];\r\n            animation.finished\r\n                .then(() => {\r\n                if (persist)\r\n                    return;\r\n                // Apply styles to target\r\n                style.set(element, name, target);\r\n                // Ensure fill modes don't persist\r\n                animation.cancel();\r\n            })\r\n                .catch(noop);\r\n            /**\r\n             * This forces Webkit to run animations on the main thread by exploiting\r\n             * this condition:\r\n             * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\r\n             *\r\n             * This fixes Webkit's timing bugs, like accelerated animations falling\r\n             * out of sync with main thread animations and massive delays in starting\r\n             * accelerated animations in WKWebView.\r\n             */\r\n            if (!allowWebkitAcceleration)\r\n                animation.playbackRate = 1.000001;\r\n            /**\r\n             * If we can't animate the value natively then we can fallback to the numbers-only\r\n             * polyfill for transforms.\r\n             */\r\n        }\r\n        else if (AnimationPolyfill && valueIsTransform) {\r\n            /**\r\n             * If any keyframe is a string (because we measured it from the DOM), we need to convert\r\n             * it into a number before passing to the Animation polyfill.\r\n             */\r\n            keyframes = keyframes.map((value) => typeof value === \"string\" ? parseFloat(value) : value);\r\n            /**\r\n             * If we only have a single keyframe, we need to create an initial keyframe by reading\r\n             * the current value from the DOM.\r\n             */\r\n            if (keyframes.length === 1) {\r\n                keyframes.unshift(parseFloat(readInitialValue()));\r\n            }\r\n            animation = new AnimationPolyfill((latest) => {\r\n                style.set(element, name, toUnit ? toUnit(latest) : latest);\r\n            }, keyframes, Object.assign(Object.assign({}, options), { duration,\r\n                easing }));\r\n        }\r\n        else {\r\n            const target = keyframes[keyframes.length - 1];\r\n            style.set(element, name, definition && isNumber(target)\r\n                ? definition.toDefaultUnit(target)\r\n                : target);\r\n        }\r\n        if (isRecording) {\r\n            record(element, key, keyframes, {\r\n                duration,\r\n                delay: delay,\r\n                easing,\r\n                repeat,\r\n                offset,\r\n            }, \"motion-one\");\r\n        }\r\n        motionValue.setAnimation(animation);\r\n        return animation;\r\n    };\r\n}\r\n\r\nexport { animateStyle };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}