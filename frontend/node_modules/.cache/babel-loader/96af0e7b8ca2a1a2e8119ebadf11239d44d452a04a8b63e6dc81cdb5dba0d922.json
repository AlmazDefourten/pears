{"ast":null,"code":"import { isFunction, defaults, isCubicBezier, progress } from '@motionone/utils';\nimport { supports } from './feature-detection.es.js';\n\n// Create a linear easing point for every x second\nconst resolution = 0.015;\nconst generateLinearEasingPoints = (easing, duration) => {\n  let points = \"\";\n  const numPoints = Math.round(duration / resolution);\n  for (let i = 0; i < numPoints; i++) {\n    points += easing(progress(0, numPoints - 1, i)) + \", \";\n  }\n  return points.substring(0, points.length - 2);\n};\nconst convertEasing = (easing, duration) => {\n  if (isFunction(easing)) {\n    return supports.linearEasing() ? `linear(${generateLinearEasingPoints(easing, duration)})` : defaults.easing;\n  } else {\n    return isCubicBezier(easing) ? cubicBezierAsString(easing) : easing;\n  }\n};\nconst cubicBezierAsString = _ref => {\n  let [a, b, c, d] = _ref;\n  return `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\n};\nexport { convertEasing, cubicBezierAsString, generateLinearEasingPoints };","map":{"version":3,"names":["isFunction","defaults","isCubicBezier","progress","supports","resolution","generateLinearEasingPoints","easing","duration","points","numPoints","Math","round","i","substring","length","convertEasing","linearEasing","cubicBezierAsString","_ref","a","b","c","d"],"sources":["C:/Users/Кирилл/Desktop/here/pears/frontend/node_modules/@motionone/dom/dist/animate/utils/easing.es.js"],"sourcesContent":["import { isFunction, defaults, isCubicBezier, progress } from '@motionone/utils';\r\nimport { supports } from './feature-detection.es.js';\r\n\r\n// Create a linear easing point for every x second\r\nconst resolution = 0.015;\r\nconst generateLinearEasingPoints = (easing, duration) => {\r\n    let points = \"\";\r\n    const numPoints = Math.round(duration / resolution);\r\n    for (let i = 0; i < numPoints; i++) {\r\n        points += easing(progress(0, numPoints - 1, i)) + \", \";\r\n    }\r\n    return points.substring(0, points.length - 2);\r\n};\r\nconst convertEasing = (easing, duration) => {\r\n    if (isFunction(easing)) {\r\n        return supports.linearEasing()\r\n            ? `linear(${generateLinearEasingPoints(easing, duration)})`\r\n            : defaults.easing;\r\n    }\r\n    else {\r\n        return isCubicBezier(easing) ? cubicBezierAsString(easing) : easing;\r\n    }\r\n};\r\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\r\n\r\nexport { convertEasing, cubicBezierAsString, generateLinearEasingPoints };\r\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,QAAQ,QAAQ,kBAAkB;AAChF,SAASC,QAAQ,QAAQ,2BAA2B;;AAEpD;AACA,MAAMC,UAAU,GAAG,KAAK;AACxB,MAAMC,0BAA0B,GAAGA,CAACC,MAAM,EAAEC,QAAQ,KAAK;EACrD,IAAIC,MAAM,GAAG,EAAE;EACf,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACJ,QAAQ,GAAGH,UAAU,CAAC;EACnD,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,EAAEG,CAAC,EAAE,EAAE;IAChCJ,MAAM,IAAIF,MAAM,CAACJ,QAAQ,CAAC,CAAC,EAAEO,SAAS,GAAG,CAAC,EAAEG,CAAC,CAAC,CAAC,GAAG,IAAI;EAC1D;EACA,OAAOJ,MAAM,CAACK,SAAS,CAAC,CAAC,EAAEL,MAAM,CAACM,MAAM,GAAG,CAAC,CAAC;AACjD,CAAC;AACD,MAAMC,aAAa,GAAGA,CAACT,MAAM,EAAEC,QAAQ,KAAK;EACxC,IAAIR,UAAU,CAACO,MAAM,CAAC,EAAE;IACpB,OAAOH,QAAQ,CAACa,YAAY,EAAE,GACvB,UAASX,0BAA0B,CAACC,MAAM,EAAEC,QAAQ,CAAE,GAAE,GACzDP,QAAQ,CAACM,MAAM;EACzB,CAAC,MACI;IACD,OAAOL,aAAa,CAACK,MAAM,CAAC,GAAGW,mBAAmB,CAACX,MAAM,CAAC,GAAGA,MAAM;EACvE;AACJ,CAAC;AACD,MAAMW,mBAAmB,GAAGC,IAAA;EAAA,IAAC,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAAJ,IAAA;EAAA,OAAM,gBAAeC,CAAE,KAAIC,CAAE,KAAIC,CAAE,KAAIC,CAAE,GAAE;AAAA;AAEpF,SAASP,aAAa,EAAEE,mBAAmB,EAAEZ,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}