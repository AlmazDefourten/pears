{"ast":null,"code":"import { invariant } from 'hey-listen';\nimport { animateStyle } from './animate-style.es.js';\nimport { getOptions } from './utils/options.es.js';\nimport { resolveElements } from '../utils/resolve-elements.es.js';\nimport { withControls } from './utils/controls.es.js';\nimport { resolveOption } from '../utils/stagger.es.js';\nfunction createAnimate(AnimatePolyfill) {\n  return function animate(elements, keyframes) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    elements = resolveElements(elements);\n    const numElements = elements.length;\n    invariant(Boolean(numElements), \"No valid element provided.\");\n    invariant(Boolean(keyframes), \"No keyframes defined.\");\n    /**\r\n     * Create and start new animations\r\n     */\n    const animationFactories = [];\n    for (let i = 0; i < numElements; i++) {\n      const element = elements[i];\n      for (const key in keyframes) {\n        const valueOptions = getOptions(options, key);\n        valueOptions.delay = resolveOption(valueOptions.delay, i, numElements);\n        const animation = animateStyle(element, key, keyframes[key], valueOptions, AnimatePolyfill);\n        animationFactories.push(animation);\n      }\n    }\n    return withControls(animationFactories, options,\n    /**\r\n     * TODO:\r\n     * If easing is set to spring or glide, duration will be dynamically\r\n     * generated. Ideally we would dynamically generate this from\r\n     * animation.effect.getComputedTiming().duration but this isn't\r\n     * supported in iOS13 or our number polyfill. Perhaps it's possible\r\n     * to Proxy animations returned from animateStyle that has duration\r\n     * as a getter.\r\n     */\n    options.duration);\n  };\n}\nexport { createAnimate };","map":{"version":3,"names":["invariant","animateStyle","getOptions","resolveElements","withControls","resolveOption","createAnimate","AnimatePolyfill","animate","elements","keyframes","options","arguments","length","undefined","numElements","Boolean","animationFactories","i","element","key","valueOptions","delay","animation","push","duration"],"sources":["C:/Users/Кирилл/Desktop/gdfjtgj/pears/frontend/node_modules/@motionone/dom/dist/animate/create-animate.es.js"],"sourcesContent":["import { invariant } from 'hey-listen';\r\nimport { animateStyle } from './animate-style.es.js';\r\nimport { getOptions } from './utils/options.es.js';\r\nimport { resolveElements } from '../utils/resolve-elements.es.js';\r\nimport { withControls } from './utils/controls.es.js';\r\nimport { resolveOption } from '../utils/stagger.es.js';\r\n\r\nfunction createAnimate(AnimatePolyfill) {\r\n    return function animate(elements, keyframes, options = {}) {\r\n        elements = resolveElements(elements);\r\n        const numElements = elements.length;\r\n        invariant(Boolean(numElements), \"No valid element provided.\");\r\n        invariant(Boolean(keyframes), \"No keyframes defined.\");\r\n        /**\r\n         * Create and start new animations\r\n         */\r\n        const animationFactories = [];\r\n        for (let i = 0; i < numElements; i++) {\r\n            const element = elements[i];\r\n            for (const key in keyframes) {\r\n                const valueOptions = getOptions(options, key);\r\n                valueOptions.delay = resolveOption(valueOptions.delay, i, numElements);\r\n                const animation = animateStyle(element, key, keyframes[key], valueOptions, AnimatePolyfill);\r\n                animationFactories.push(animation);\r\n            }\r\n        }\r\n        return withControls(animationFactories, options, \r\n        /**\r\n         * TODO:\r\n         * If easing is set to spring or glide, duration will be dynamically\r\n         * generated. Ideally we would dynamically generate this from\r\n         * animation.effect.getComputedTiming().duration but this isn't\r\n         * supported in iOS13 or our number polyfill. Perhaps it's possible\r\n         * to Proxy animations returned from animateStyle that has duration\r\n         * as a getter.\r\n         */\r\n        options.duration);\r\n    };\r\n}\r\n\r\nexport { createAnimate };\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,eAAe,QAAQ,iCAAiC;AACjE,SAASC,YAAY,QAAQ,wBAAwB;AACrD,SAASC,aAAa,QAAQ,wBAAwB;AAEtD,SAASC,aAAaA,CAACC,eAAe,EAAE;EACpC,OAAO,SAASC,OAAOA,CAACC,QAAQ,EAAEC,SAAS,EAAgB;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACrDH,QAAQ,GAAGN,eAAe,CAACM,QAAQ,CAAC;IACpC,MAAMM,WAAW,GAAGN,QAAQ,CAACI,MAAM;IACnCb,SAAS,CAACgB,OAAO,CAACD,WAAW,CAAC,EAAE,4BAA4B,CAAC;IAC7Df,SAAS,CAACgB,OAAO,CAACN,SAAS,CAAC,EAAE,uBAAuB,CAAC;IACtD;AACR;AACA;IACQ,MAAMO,kBAAkB,GAAG,EAAE;IAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,EAAEG,CAAC,EAAE,EAAE;MAClC,MAAMC,OAAO,GAAGV,QAAQ,CAACS,CAAC,CAAC;MAC3B,KAAK,MAAME,GAAG,IAAIV,SAAS,EAAE;QACzB,MAAMW,YAAY,GAAGnB,UAAU,CAACS,OAAO,EAAES,GAAG,CAAC;QAC7CC,YAAY,CAACC,KAAK,GAAGjB,aAAa,CAACgB,YAAY,CAACC,KAAK,EAAEJ,CAAC,EAAEH,WAAW,CAAC;QACtE,MAAMQ,SAAS,GAAGtB,YAAY,CAACkB,OAAO,EAAEC,GAAG,EAAEV,SAAS,CAACU,GAAG,CAAC,EAAEC,YAAY,EAAEd,eAAe,CAAC;QAC3FU,kBAAkB,CAACO,IAAI,CAACD,SAAS,CAAC;MACtC;IACJ;IACA,OAAOnB,YAAY,CAACa,kBAAkB,EAAEN,OAAO;IAC/C;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQA,OAAO,CAACc,QAAQ,CAAC;EACrB,CAAC;AACL;AAEA,SAASnB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}